{"openapi":"3.0.0","paths":{"/assets/global-metadata":{"get":{"operationId":"AssetsController_getGlobalMetadataKeys","summary":"Fetch an Global Asset Metadata","description":"This endpoint retrieves all the Asset Global Metadata on chain","parameters":[],"responses":{"200":{"description":"List of Asset Global Metadata which includes id, name and specs","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/GlobalMetadataModel"}}}}}},"tags":["assets","metadata"]}},"/assets/{ticker}":{"get":{"operationId":"AssetsController_getDetails","summary":"Fetch Asset details","description":"This endpoint will provide the basic details of an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose details are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Basic details of the Asset","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssetDetailsModel"}}}}},"tags":["assets"]}},"/assets/{ticker}/holders":{"get":{"operationId":"AssetsController_getHolders","summary":"Fetch a list of Asset holders","description":"This endpoint will provide the list of Asset holders along with their current balance","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose holders are to be fetched","example":"TICKER","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Asset holders to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start key from which Asset holders are to be fetched","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Asset holders, each consisting of a DID and their current Asset balance","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/IdentityBalanceModel"},"description":"List of Asset holders, each consisting of a DID and their current Asset balance"}}}]}}}}},"tags":["assets"]}},"/assets/{ticker}/documents":{"get":{"operationId":"AssetsController_getDocuments","summary":"Fetch a list of Asset documents","description":"This endpoint will provide the list of documents attached to an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose attached documents are to be fetched","example":"TICKER","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of documents to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start key from which documents are to be fetched","example":"START_KEY","schema":{"type":"string"}}],"responses":{"200":{"description":"List of documents attached to the Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/AssetDocumentModel"},"description":"List of documents attached to the Asset"}}}]}}}}},"tags":["assets"]}},"/assets/{ticker}/documents/set":{"post":{"operationId":"AssetsController_setDocuments","summary":"Set a list of Documents for an Asset","description":"This endpoint assigns a new list of Documents to the Asset by replacing the existing list of Documents with the ones passed in the body","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose documents are to be updated","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetAssetDocumentsDto"}}}},"responses":{"200":{"description":"Details of the transaction"},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"The supplied Document list is equal to the current one"},"404":{"description":"Asset was not found"}},"tags":["assets"]}},"/assets/{ticker}/issue":{"post":{"operationId":"AssetsController_issue","summary":"Issue more of an Asset","description":"This endpoint issues more of a given Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to issue","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IssueDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset does not exist"}},"tags":["assets"]}},"/assets/create":{"post":{"operationId":"AssetsController_createAsset","summary":"Create an Asset","description":"This endpoint allows for the creation of new assets","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateAssetDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The ticker reservation does not exist"},"410":{"description":"The ticker has already been used to create an asset"}},"tags":["assets"]}},"/assets/{ticker}/transfer-ownership":{"post":{"operationId":"AssetsController_transferOwnership","summary":"Transfer ownership of an Asset","description":"This endpoint transfers ownership of the Asset to a `target` Identity. This generates an authorization request that must be accepted by the `target` Identity","parameters":[{"name":"ticker","required":true,"in":"path","description":"Ticker of the Asset whose ownership is to be transferred","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferOwnershipDto"}}}},"responses":{"201":{"description":"Newly created Authorization Request along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedAuthorizationRequestModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["assets"]}},"/assets/{ticker}/redeem":{"post":{"operationId":"AssetsController_redeem","summary":"Redeem Asset tokens","description":"This endpoint allows to redeem (burn) an amount of an Asset tokens. These tokens are removed from Signer's Default Portfolio","parameters":[{"name":"ticker","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RedeemTokensDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset does not exist"},"422":{"description":"The amount to be redeemed is larger than the free balance in the Signer's Default Portfolio"}},"tags":["assets"]}},"/assets/{ticker}/freeze":{"post":{"operationId":"AssetsController_freeze","summary":"Freeze transfers for an Asset","description":"This endpoint submits a transaction that causes the Asset to become frozen. This means that it cannot be transferred or minted until it is unfrozen","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to freeze","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset does not exist"},"422":{"description":"The Asset is already frozen"}},"tags":["assets"]}},"/assets/{ticker}/unfreeze":{"post":{"operationId":"AssetsController_unfreeze","summary":"Unfreeze transfers for an Asset","description":"This endpoint submits a transaction that unfreezes the Asset. This means that transfers and minting can be performed until it is frozen again","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to unfreeze","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset does not exist"},"422":{"description":"The Asset is already unfrozen"}},"tags":["assets"]}},"/assets/{ticker}/controller-transfer":{"post":{"operationId":"AssetsController_controllerTransfer","summary":"Controller Transfer","description":"This endpoint forces a transfer from the `origin` Portfolio to the signer’s Default Portfolio","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to be transferred","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ControllerTransferDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset does not exist"},"422":{"description":"The `origin` Portfolio does not have enough free balance for the transfer"}},"tags":["assets"]}},"/assets/{ticker}/operations":{"get":{"operationId":"AssetsController_getOperationHistory","summary":"Fetch an Asset's operation history","description":"This endpoint provides a list of events triggered by transactions performed by various agent Identities, related to the Asset's configuration","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose operation history is to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of operations grouped by the agent Identity who performed them","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/AgentOperationModel"}}}}}},"tags":["assets"]}},"/signer/{signer}":{"get":{"operationId":"SigningController_getSignerAddress","summary":"Fetch signer details","description":"This endpoint provides information associated with a particular `signer`","parameters":[{"name":"signer","required":true,"in":"path","description":"The value of the `signer` to fetch the address for. Note, the format depends on the signing manager the API is configured with. A Fireblocks signer is up to three numbers like `x-y-z`, Vault will be `{name}-{version}`, while a Local signer can be any string, like `alice`","example":"alice","schema":{"type":"string"}}],"responses":{"200":{"description":"Information about the address associated to the signer","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SignerModel"}}}},"400":{"description":"The signer did not have the proper format for the given signing manager"},"404":{"description":"The signer was not found"}},"tags":["signer"]}},"/assets/{ticker}/metadata":{"get":{"operationId":"MetadataController_getMetadata","summary":"Fetch an Asset's Metadata","description":"This endpoint retrieves all the Metadata entries for a given Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose metadata are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Metadata entries distinguished by id, type and ticker","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/MetadataEntryModel"},"description":"List of Metadata entries distinguished by id, type and ticker"}}}]}}}}},"tags":["asset","metadata"]}},"/assets/{ticker}/metadata/{type}/{id}":{"get":{"operationId":"MetadataController_getSingleMetadata","summary":"Fetch a specific Metadata entry for any Asset","description":"This endpoint retrieves the details of an Asset Metadata entry by its type and ID","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose metadata is to be fetched","example":"TICKER","schema":{"type":"string"}},{"name":"type","required":true,"in":"path","description":"The type of Asset Metadata to be filtered","example":"Local","schema":{"type":"string","enum":["Local","Global"]}},{"name":"id","required":true,"in":"path","description":"The ID of Asset Metadata to be filtered","example":"1","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of an Asset Metadata including name, specs and value","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MetadataDetailsModel"}}}},"404":{"description":"Asset Metadata does not exists"}},"tags":["asset","metadata"]}},"/assets/{ticker}/metadata/create":{"post":{"operationId":"MetadataController_createMetadata","summary":"Create a local metadata for an Asset and optionally set its value.","description":"This endpoint creates a local metadata for the given Asset. The metadata value can be set by passing `value` parameter and specifying other optional `details` about the value","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the metadata is to be created","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateMetadataDto"}}}},"responses":{"201":{"description":"The newly created Metadata entry along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedMetadataEntryModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"<ul><li>Asset Metadata name length exceeded</li> <li>Asset Metadata value length exceeded</li></ul>"},"404":{"description":"The Asset was not found"},"422":{"description":"<ul><li>Asset Metadata with the given name already exists</li> <li>Locked until date of the Metadata value must be in the future</li> <li>Expiry date for the Metadata value must be in the future</li></ul>"}},"tags":["asset","metadata"]}},"/assets/{ticker}/metadata/{type}/{id}/set":{"post":{"operationId":"MetadataController_setMetadata","summary":"Set an Asset's Metadata value and details","description":"This endpoint assigns a new value for the Metadata along with its expiry and lock status (when provided with `details`) of the Metadata value. Note that the value of a locked Metadata cannot be altered","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the Metadata value is to be set","example":"TICKER","schema":{"type":"string"}},{"name":"type","required":true,"in":"path","description":"The type of Asset Metadata","example":"Local","schema":{"type":"string","enum":["Local","Global"]}},{"name":"id","required":true,"in":"path","description":"The ID of Asset Metadata","example":"1","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetMetadataDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Asset Metadata name length exceeded"},"404":{"description":"<ul><li>The Asset was not found</li> <li>Asset Metadata does not exists</li></ul>"},"422":{"description":"<ul><li>Details cannot be set for a locked Metadata value</li> <li>Metadata value is currently locked</li> <li>Details cannot be set for a metadata without a value</li></ul>"}},"tags":["asset","metadata"]}},"/ticker-reservations/reserve-ticker":{"post":{"operationId":"TickerReservationsController_reserve","summary":"Reserve a Ticker","description":"Reserves a ticker so that an Asset can be created with it later","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ReserveTickerDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"The ticker has already been reserved"}},"tags":["ticker-reservations"]}},"/ticker-reservations/{ticker}":{"get":{"operationId":"TickerReservationsController_getDetails","summary":"Get ticker reservation details","description":"This endpoint returns details of ticker reservation","parameters":[{"name":"ticker","required":true,"in":"path","description":"Ticker whose details are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of the ticker reservation","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TickerReservationModel"}}}}},"tags":["ticker-reservations"]}},"/ticker-reservations/{ticker}/transfer-ownership":{"post":{"operationId":"TickerReservationsController_transferOwnership","summary":"Transfer ownership of the ticker Reservation","description":"This endpoint transfers ownership of the ticker Reservation to `target` Identity. This generates an authorization request that must be accepted by the `target` Identity","parameters":[{"name":"ticker","required":true,"in":"path","description":"Ticker whose ownership is to be transferred","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferOwnershipDto"}}}},"responses":{"201":{"description":"Newly created Authorization Request along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedAuthorizationRequestModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"Asset has already been created for the ticker"}},"tags":["ticker-reservations"]}},"/ticker-reservations/{ticker}/extend":{"post":{"operationId":"TickerReservationsController_extendReservation","summary":"Extend ticker reservation","description":"This endpoint extends the time period of a ticker reservation for 60 days from now","parameters":[{"name":"ticker","required":true,"in":"path","description":"Ticker whose expiry date is to be extended","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of extended ticker reservation along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ExtendedTickerReservationModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"<ul><li>Asset has already been created for the ticker</li><li>Ticker not reserved or the Reservation has expired</li></ul>"}},"tags":["ticker-reservations"]}},"/identities/{did}":{"get":{"operationId":"IdentitiesController_getIdentityDetails","summary":"Get Identity details","description":"This endpoint will allow you to give the basic details of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose details are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"Returns basic details of the Identity","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityModel"}}}}},"tags":["identities"]}},"/identities/{did}/pending-authorizations":{"get":{"operationId":"IdentitiesController_getPendingAuthorizations","summary":"Get pending Authorizations received by an Identity","description":"This endpoint will provide list of all the pending Authorizations received by an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose pending Authorizations are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"type","required":false,"in":"query","description":"Authorization type to be filtered","schema":{"enum":["AttestPrimaryKeyRotation","RotatePrimaryKey","TransferTicker","AddMultiSigSigner","TransferAssetOwnership","JoinIdentity","PortfolioCustody","BecomeAgent","AddRelayerPayingKey","RotatePrimaryKeyToSecondary"],"type":"string"}},{"name":"includeExpired","required":false,"in":"query","description":"Indicates whether to include expired authorizations or not. Defaults to true","schema":{"default":true,"type":"boolean"}}],"responses":{"200":{"description":"List of all pending Authorizations for which the given Identity is either the issuer or the target","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PendingAuthorizationsModel"}}}}},"tags":["identities","authorizations"]}},"/identities/{did}/pending-authorizations/{id}":{"get":{"operationId":"IdentitiesController_getPendingAuthorization","summary":"Get a pending Authorization","description":"This endpoint will return a specific Authorization issued by or targeting an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the issuer or target Identity of the Authorization being fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the Authorization to be fetched","example":"1","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of the Authorization","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthorizationRequestModel"}}}}},"tags":["identities","authorizations"]}},"/identities/{did}/assets":{"get":{"operationId":"IdentitiesController_getAssets","summary":"Fetch all Assets owned by an Identity","description":"","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Assets are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"type":"string"},"example":["FOO_TICKER","BAR_TICKER","BAZ_TICKER"]}}}]}}}}},"tags":["identities","assets"]}},"/identities/{did}/pending-instructions":{"get":{"operationId":"IdentitiesController_getPendingInstructions","summary":"Fetch all pending settlement Instructions where an Identity is involved","description":"","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose pending settlement Instructions are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"List of IDs of all pending Instructions","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"type":"string"},"example":["123","456","789"],"description":"List of IDs of all pending Instructions"}}}]}}}}},"tags":["identities","settlements","instructions"]}},"/identities/{did}/venues":{"get":{"operationId":"IdentitiesController_getVenues","summary":"Get all Venues owned by an Identity","description":"This endpoint will provide list of venues for an identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Venues are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"List of IDs of all owned Venues","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"type":"string"},"example":["123","456","789"],"description":"List of IDs of all owned Venues"}}}]}}}}},"tags":["identities","settlements"]}},"/identities/{did}/issued-claims":{"get":{"operationId":"IdentitiesController_getIssuedClaims","summary":"Get all issued Claims","description":"This endpoint will provide a list of all the Claims issued by an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose issued Claims are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Claims to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start index from which Claims are to be fetched","example":"0","schema":{"type":"string"}},{"name":"includeExpired","required":false,"in":"query","description":"Indicates whether to include expired Claims or not. Defaults to true","schema":{"default":true,"type":"boolean"}}],"responses":{"200":{"description":"List of issued Claims for the given DID","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/ClaimModel"},"description":"List of issued Claims for the given DID"}}}]}}}}},"tags":["identities","claims"]}},"/identities/{did}/associated-claims":{"get":{"operationId":"IdentitiesController_getAssociatedClaims","summary":"Get all Claims targeting an Identity","description":"This endpoint will provide a list of all the Claims made about an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose associated Claims are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Claims to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start index from which Claims are to be fetched","schema":{"type":"string"}},{"name":"includeExpired","required":false,"in":"query","description":"Indicates whether to include expired Claims or not. Defaults to true","schema":{"default":true,"type":"boolean"}},{"name":"claimTypes","required":false,"in":"query","description":"Claim types for filtering associated Claims","example":["Accredited","CustomerDueDiligence"],"schema":{"type":"array","items":{"type":"string","enum":["Accredited","Affiliate","BuyLockup","SellLockup","CustomerDueDiligence","KnowYourCustomer","Jurisdiction","Exempted","Blocked","InvestorUniqueness","NoType","NoData","InvestorUniquenessV2"]}}}],"responses":{"200":{"description":"List of associated Claims for the given DID","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/ClaimModel"},"description":"List of associated Claims for the given DID"}}}]}}}}},"tags":["identities","claims"]}},"/identities/{did}/trusting-assets":{"get":{"operationId":"IdentitiesController_getTrustingAssets","summary":"Fetch all Assets for which an Identity is a trusted Claim Issuer","description":"","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Claim Issuer for which the Assets are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Assets for which the Identity is a trusted Claim Issuer","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"type":"string"},"example":["SOME_TICKER","RANDOM_TICKER"],"description":"List of Assets for which the Identity is a trusted Claim Issuer"}}}]}}}}},"tags":["identities","assets"]}},"/identities/secondary-accounts/invite":{"post":{"operationId":"IdentitiesController_addSecondaryAccount","summary":"Add Secondary Account","description":"This endpoint will send an invitation to a Secondary Account to join the Identity of the signer. It also defines the set of permissions the Secondary Account will have.","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddSecondaryAccountParamsDto"}}}},"responses":{"201":{"description":"Newly created Authorization Request along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedAuthorizationRequestModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"The target Account is already part of an Identity or already has a pending invitation to join this Identity"},"500":{"description":"The supplied address is not encoded with the chain's SS58 format"}},"tags":["identities"]}},"/identities/{did}/ticker-reservations":{"get":{"operationId":"IdentitiesController_getTickerReservations","summary":"Fetch all tickers reserved by an Identity","description":"This endpoint provides all the tickers currently reserved by an Identity. This doesn't include Assets that have already been created. Tickers with unreadable characters in them will be left out","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose reserved tickers are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"List of tickers","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"type":"string"},"example":["SOME_TICKER","RANDOM_TICKER"],"description":"List of tickers"}}}]}}}}},"tags":["identities","ticker-reservations"]}},"/identities/mock-cdd":{"post":{"operationId":"IdentitiesController_createMockCdd","summary":"Creates a fake Identity for an Account and sets its POLYX balance (DEPRECATED: Use `/developer-testing/create-test-account` instead)","description":"This endpoint creates a Identity for an Account and sets its POLYX balance. A sudo account must be configured.","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateMockIdentityDto"}}}},"responses":{"200":{"description":"The details of the newly created Identity"},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityModel"}}}},"400":{"description":"This instance of the REST API is pointing to a chain that lacks development features. A proper CDD provider must be used instead"},"500":{"description":"Failed to execute an extrinsic, or something unexpected"}},"tags":["identities","developer-testing"]}},"/identities/{did}/cdd-claims":{"get":{"operationId":"IdentitiesController_getCddClaims","summary":"Fetch all CDD claims for an Identity","description":"This endpoint will fetch the list of CDD claims for a target DID","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose CDD claims are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"includeExpired","required":false,"in":"query","description":"Indicates whether to include expired CDD claims or not. Defaults to true","schema":{"default":true,"type":"boolean"}}],"responses":{"200":{"description":"List of CDD claims for the target DID","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"allOf":[{"$ref":"#/components/schemas/ClaimModel-Omit-claim"},{"type":"object","properties":{"claim":{"$ref":"#/components/schemas/CddClaimModel"}}}]},"description":"List of CDD claims for the target DID"}}}]}}}}},"tags":["identities","claims"]}},"/identities/{did}/claim-scopes":{"get":{"operationId":"IdentitiesController_getClaimScopes","summary":"Fetch all claim scopes for an Identity","description":"This endpoint will fetch all scopes in which claims have been made for the given DID.","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose claim scopes are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"List of claim scopes","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/ClaimScopeModel"},"description":"List of claim scopes"}}}]}}}}},"tags":["identities","claims"]}},"/identities/{did}/investor-uniqueness-claims":{"get":{"operationId":"IdentitiesController_getInvestorUniquenessClaims","summary":"Retrieve the list of InvestorUniqueness claims for a target Identity","description":"This endpoint will provide a list of all the InvestorUniquenessClaims made about an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity for which to fetch InvestorUniquenessClaims","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"includeExpired","required":false,"in":"query","description":"Indicates whether to include expired InvestorUniquenessClaims or not. Defaults to true","schema":{"default":true,"type":"boolean"}}],"responses":{"200":{"description":"List of InvestorUniquenessClaims for the given DID","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"allOf":[{"$ref":"#/components/schemas/ClaimModel-Omit-claim"},{"type":"object","properties":{"claim":{"$ref":"#/components/schemas/InvestorUniquenessClaimModel"}}}]},"description":"List of InvestorUniquenessClaims for the given DID"}}}]}}}}},"tags":["identities","claims"]}},"/instructions/{id}":{"get":{"operationId":"SettlementsController_getInstruction","summary":"Fetch Instruction details","description":"This endpoint will provide the details of the Instruction","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction","example":"123","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of the Instruction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstructionModel"}}}},"404":{"description":"The Instruction with the given ID was not found"}},"tags":["settlements","instructions"]}},"/venues/{id}/instructions/create":{"post":{"operationId":"SettlementsController_createInstruction","summary":"Create a new Instruction","description":"","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Venue through which Settlement will be handled","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateInstructionDto"}}}},"responses":{"200":{"description":"The ID of the newly created Instruction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedInstructionModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}}},"tags":["settlements","venues","instructions"]}},"/instructions/{id}/affirm":{"post":{"operationId":"SettlementsController_affirmInstruction","summary":"Affirm an existing Instruction","description":"This endpoint will affirm a pending Instruction. All owners of involved portfolios must affirm for the Instruction to be executed","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction to be affirmed","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}}},"tags":["settlements","instructions"]}},"/instructions/{id}/reject":{"post":{"operationId":"SettlementsController_rejectInstruction","summary":"Reject an existing Instruction","description":"This endpoint will reject a pending Instruction","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction to be rejected","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}}},"tags":["settlements","instructions"]}},"/instructions/{id}/withdraw":{"post":{"operationId":"SettlementsController_withdrawAffirmation","summary":"Withdraw affirmation from an existing Instruction","description":"This endpoint will withdraw an affirmation from an Instruction","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction from which to withdraw the affirmation","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"The requested Instruction was not found"}},"tags":["settlements","instructions"]}},"/instructions/{id}/reschedule":{"post":{"operationId":"SettlementsController_rescheduleInstruction","summary":"Reschedule a failed Instruction","description":"This endpoint will reschedule a failed Instruction","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction to be rescheduled","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"The Instruction with the given ID was not found"},"422":{"description":"Only transaction with status code `Failed` can be rescheduled"}},"tags":["settlements","instructions"]}},"/instructions/{id}/affirmations":{"get":{"operationId":"SettlementsController_getAffirmations","summary":"List of affirmations","description":"This endpoint will provide the list of all affirmations generated by a Instruction","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Instruction whose affirmations are to be fetched","example":"123","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of affirmations to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start index from which affirmations are to be fetched","schema":{"type":"string"}}],"responses":{"200":{"description":"List of all affirmations related to the target Identity and their current status","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/InstructionAffirmationModel"},"description":"List of all affirmations related to the target Identity and their current status"}}}]}}}}},"tags":["settlements","instructions"]}},"/venues/{id}":{"get":{"operationId":"SettlementsController_getVenueDetails","summary":"Fetch details of a Venue","description":"This endpoint will provide the basic details of a Venue","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Venue whose details are to be fetched","example":"123","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of the Venue","content":{"application/json":{"schema":{"$ref":"#/components/schemas/VenueDetailsModel"}}}}},"tags":["settlements","venues"]}},"/venues/create":{"post":{"operationId":"SettlementsController_createVenue","summary":"Create a Venue","description":"This endpoint creates a new Venue","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateVenueDto"}}}},"responses":{"201":{"description":"Details about the newly created Venue","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedVenueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["settlements","venues"]}},"/venues/{id}/modify":{"post":{"operationId":"SettlementsController_modifyVenue","summary":"Modify a venue's details","description":"","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyVenueDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}}},"tags":["settlements","venues"]}},"/leg-validations":{"get":{"operationId":"SettlementsController_validateLeg","summary":"Check if a Leg meets the transfer requirements","description":"This endpoint will provide transfer breakdown of an Asset transfer","parameters":[{"name":"amount","required":true,"in":"query","description":"Amount of the Asset to be transferred","example":"1000","schema":{"type":"string"}},{"name":"fromDid","required":true,"in":"query","description":"DID of the sender","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"fromPortfolio","required":true,"in":"query","description":"Portfolio ID of the sender from which Asset is to be transferred. Use 0 for the Default Portfolio","example":"1","schema":{"type":"string"}},{"name":"toDid","required":true,"in":"query","description":"DID of the receiver","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"toPortfolio","required":true,"in":"query","description":"Portfolio ID of the receiver to which Asset is to be transferred. Use 0 for Default Portfolio","example":"2","schema":{"type":"string"}},{"name":"asset","required":true,"in":"query","description":"Ticker of the Asset to be transferred","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Breakdown of every requirement that must be fulfilled for an Asset transfer to be executed successfully, and whether said requirement is met or not","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferBreakdownModel"}}}}},"tags":["settlements","assets"]}},"/authorizations/{id}/accept":{"post":{"operationId":"AuthorizationsController_accept","summary":"Accept an Authorization Request","description":"This endpoint will accept a pending Authorization Request. You must be the target of the Request to be able to accept it","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Authorization Request to be accepted","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"There is no Authorization Request with the passed ID targeting the `signer`"}},"tags":["authorizations"]}},"/authorizations/{id}/remove":{"post":{"operationId":"AuthorizationsController_remove","summary":"Remove an Authorization Request","description":"This endpoint will reject/cancel a pending Authorization Request\n      <ul>\n        <li>If you are the Request issuer, this will cancel the Authorization</li>\n        <li>If you are the Request target, this will reject the Authorization</li>\n      </ul>\n    ","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Authorization Request to be removed","example":"123","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"There is no Authorization Request with the passed ID issued by or targeting the `signer`"}},"tags":["authorizations"]}},"/accounts/{account}/balance":{"get":{"operationId":"AccountsController_getAccountBalance","summary":"Get POLYX balance of an Account","description":"This endpoint provides the free, locked and total POLYX balance of an Account","parameters":[{"name":"account","required":true,"in":"path","description":"The Account address whose balance is to be fetched","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV","schema":{"type":"string"}}],"responses":{"200":{"description":"Free, locked and total POLYX balance of the Account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/BalanceModel"}}}}},"tags":["accounts"]}},"/accounts/transfer":{"post":{"operationId":"AccountsController_transferPolyx","summary":"Transfer an amount of POLYX to an account","description":"This endpoint transfers an amount of POLYX to a specified Account","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransferPolyxDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"<ul><li>The destination Account doesn't have an associated Identity</li><li>The receiver Identity has an invalid CDD claim</li><li>Insufficient free balance</li></ul>"}},"tags":["accounts"]}},"/accounts/{account}/transactions":{"get":{"operationId":"AccountsController_getTransactionHistory","summary":"Get transaction history of an Account","description":"This endpoint provides a list of transactions signed by the given Account. This requires Polymesh GraphQL Middleware Service","parameters":[{"name":"account","required":true,"in":"path","description":"The Account address whose transaction history is to be fetched","example":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY","schema":{"type":"string"}},{"name":"blockNumber","required":false,"in":"query","description":"Number of the Block","example":"1000000","schema":{"type":"string"}},{"name":"blockHash","required":false,"in":"query","description":"Hash of the Block. Note, this property will be ignored if `blockNumber` is also specified","example":"0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6","schema":{"type":"string"}},{"name":"tag","required":false,"in":"query","description":"Transaction tags to be filtered","example":"asset.registerTicker","schema":{"enum":["system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"],"type":"string"}},{"name":"success","required":false,"in":"query","description":"If true, only successful transactions are fetched","example":true,"schema":{"type":"boolean"}},{"name":"size","required":false,"in":"query","description":"Number of transactions to be fetched","example":"10","schema":{"type":"string"}},{"name":"start","required":false,"in":"query","description":"Start index from which transactions are to be fetched","example":"1","schema":{"type":"string"}},{"name":"field","required":false,"in":"query","description":"Name of the transaction field based on which transactions will be sorted. Note, this property will be ignored if `order` is not specified","example":"block_id","schema":{"default":"block_id","enum":["block_id","address","module_id","call_id"],"type":"string"}},{"name":"order","required":false,"in":"query","description":"Order in which the transactions will be sorted based on the value of the `field`.  Note, this property will be ignored if `field` is not specified","example":"DESC","schema":{"default":"DESC","enum":["ASC","DESC"],"type":"string"}}],"responses":{"200":{"description":"List of transactions signed by the given Account","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/ExtrinsicModel"},"description":"List of transactions signed by the given Account"}}}]}}}}},"tags":["accounts"]}},"/accounts/{account}/permissions":{"get":{"operationId":"AccountsController_getPermissions","summary":"Get Account Permissions","description":"The endpoint retrieves the Permissions an Account has as a Permissioned Account for its corresponding Identity","parameters":[{"name":"account","required":true,"in":"path","description":"The Account address whose Permissions are to be fetched","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV","schema":{"type":"string"}}],"responses":{"200":{"description":"Permissions of the Account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionsModel"}}}},"404":{"description":"Account is not associated with any Identity"}},"tags":["accounts"]}},"/accounts/{account}/subsidy":{"get":{"operationId":"AccountsController_getSubsidy","summary":"Get Account Subsidy","description":"The endpoint retrieves the subsidized balance of this Account and the subsidizer Account","parameters":[{"name":"account","required":true,"in":"path","description":"The Account address whose subsidy is to be fetched","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV","schema":{"type":"string"}}],"responses":{"200":{"description":"Subsidy details for the Account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SubsidyModel"}}}},"204":{"description":"Account is not being subsidized"}},"tags":["accounts"]}},"/accounts/freeze":{"post":{"operationId":"AccountsController_freezeSecondaryAccounts","summary":"Freeze secondary Accounts","description":"This endpoint freezes all the secondary Accounts in the signing Identity. This means revoking their permission to perform any operation on the chain and freezing their funds until the Accounts are unfrozen","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Secondary Accounts have been frozen"},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"The secondary Accounts are already frozen"},"422":{"description":"The `signer` is not authorized to freeze their Identities secondary Accounts"}},"tags":["accounts"]}},"/accounts/unfreeze":{"post":{"operationId":"AccountsController_unfreezeSecondaryAccounts","summary":"Unfreeze secondary Accounts","description":"This endpoint unfreezes all of the secondary Accounts in the signing Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Secondary Accounts have been unfrozen"},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"The secondary Accounts are already unfrozen"},"422":{"description":"The `signer` is not authorized to unfreeze their Identities secondary Accounts"}},"tags":["accounts"]}},"/accounts/permissions/revoke":{"post":{"operationId":"AccountsController_revokePermissions","summary":"Revoke all permissions for any secondary Account","description":"This endpoint revokes all permissions of a list of secondary Accounts associated with the signing Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RevokePermissionsDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"One of the Accounts is not a secondary Account for the signing Identity"}},"tags":["accounts"]}},"/accounts/permissions/modify":{"post":{"operationId":"AccountsController_modifyPermissions","summary":"Modify all permissions for any secondary Account","description":"This endpoint modifies all the permissions of a list of secondary Accounts associated with the signing Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyPermissionsDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"One of the Accounts is not a secondary Account for the signing Identity"}},"tags":["accounts"]}},"/accounts/treasury":{"get":{"operationId":"AccountsController_getTreasuryAccount","summary":"Get chain's treasury Account","description":"This endpoint retrieves treasury Account details which holds the accumulated fees used for chain development and can only be accessed through governance","parameters":[],"responses":{"200":{"description":"Details about the treasury Account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AccountModel"}}}}},"tags":["accounts"]}},"/network":{"get":{"operationId":"NetworkController_getNetworkProperties","summary":"Fetch network properties","description":"This endpoint will provide the network name and version","parameters":[],"responses":{"200":{"description":"Network properties response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NetworkPropertiesModel"}}}}},"tags":["network"]}},"/network/latest-block":{"get":{"operationId":"NetworkController_getLatestBlock","summary":"Get the latest block","description":"This endpoint will provide the latest block number","parameters":[],"responses":{"200":{"description":"Latest block number that has been added to the chain","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NetworkBlockModel"}}}}},"tags":["network"]}},"/accounts/subsidy/{subsidizer}/{beneficiary}":{"get":{"operationId":"SubsidyController_getSubsidy","summary":"Get Account Subsidy","description":"The endpoint retrieves the subsidized balance of this Account and the subsidizer Account","parameters":[{"name":"beneficiary","required":true,"in":"path","schema":{"type":"string"}},{"name":"subsidizer","required":true,"in":"path","description":"The Account address of the beneficiary","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV","schema":{"type":"string"}}],"responses":{"200":{"description":"Subsidy details for the Account","content":{"application/json":{"schema":{"$ref":"#/components/schemas/SubsidyModel"}}}},"404":{"description":"The Subsidy no longer exists"}},"tags":["accounts","subsidy"]}},"/accounts/subsidy/create":{"post":{"operationId":"SubsidyController_subsidizeAccount","summary":"Subsidize an account","description":"This endpoint sends an Authorization Request to an Account to subsidize its transaction fees","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateSubsidyDto"}}}},"responses":{"201":{"description":"Newly created Authorization Request along with transaction details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedAuthorizationRequestModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"The Beneficiary Account already has a pending invitation to add this account as a subsidizer with the same allowance"}},"tags":["accounts","subsidy"]}},"/accounts/subsidy/allowance/set":{"post":{"operationId":"SubsidyController_setAllowance","summary":"Set allowance for a Subsidy relationship","description":"This endpoint allows to set allowance of a Subsidy relationship. Note that only the subsidizer is allowed to set the allowance","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyAllowanceDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Amount of allowance to set is equal to the current allowance"},"404":{"description":"The Subsidy no longer exists"}},"tags":["accounts","subsidy"]}},"/accounts/subsidy/allowance/increase":{"post":{"operationId":"SubsidyController_increaseAllowance","summary":"Increase the allowance for a Subsidy relationship","description":"This endpoint allows to increase the allowance of a Subsidy relationship. Note that only the subsidizer is allowed to increase the allowance","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyAllowanceDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Subsidy no longer exists"}},"tags":["accounts","subsidy"]}},"/accounts/subsidy/allowance/decrease":{"post":{"operationId":"SubsidyController_decreaseAllowance","summary":"Decrease the allowance for a Subsidy relationship","description":"This endpoint allows to decrease the allowance of a Subsidy relationship. Note that only the subsidizer is allowed to decrease the allowance","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyAllowanceDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Subsidy no longer exists"},"422":{"description":"Amount of allowance to decrease is more than the current allowance"}},"tags":["accounts","subsidy"]}},"/accounts/subsidy/quit":{"post":{"operationId":"SubsidyController_quitSubsidy","summary":"Quit a Subsidy relationship","description":"This endpoint terminates a Subsidy relationship. The beneficiary Account will be forced to pay for their own transactions","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuitSubsidyDto"}}}},"responses":{"201":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Subsidy no longer exists"}},"tags":["accounts","subsidy"]}},"/identities/{did}/portfolios":{"get":{"operationId":"PortfoliosController_getPortfolios","summary":"Get all Portfolios of an Identity","description":"This endpoint will provide list of all the Portfolios of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Portfolios are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"Return the list of all Portfolios of the given Identity","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/PortfolioModel"},"description":"Return the list of all Portfolios of the given Identity"}}}]}}}}},"tags":["portfolios"]}},"/identities/{did}/portfolios/move-assets":{"post":{"operationId":"PortfoliosController_moveAssets","summary":"Move Assets between portfolios","description":"This endpoint moves Assets between Portfolios","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the owner of the Portfolios to move assets between.","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AssetMovementDto"}}}},"responses":{"201":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["portfolios"]}},"/portfolios/create":{"post":{"operationId":"PortfoliosController_createPortfolio","summary":"Create a Portfolio","description":"This endpoint creates a Portfolio","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatePortfolioDto"}}}},"responses":{"201":{"description":"Details of the newly created Portfolio","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedPortfolioModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/delete":{"post":{"operationId":"PortfoliosController_deletePortfolio","summary":"Delete a Portfolio","description":"This endpoint deletes a Portfolio","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Portfolio owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"Portfolio number to be deleted","example":"1","schema":{"type":"string"}},{"name":"signer","required":true,"in":"query","description":"An identifier for the account that should sign the transaction","example":"alice","schema":{"type":"string"}},{"name":"dryRun","required":true,"in":"query","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false,"schema":{"type":"boolean"}}],"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"Either the Portfolio doesn't exist or contains assets"},"404":{"description":"The Portfolio was removed and no longer exists"}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/modify-name":{"post":{"operationId":"PortfoliosController_modifyPortfolioName","summary":"Modify Portfolio name","description":"This endpoint modifies Portfolio name for a numbered portfolio","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Portfolio owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"Portfolio number for which name is to be modified","example":"1","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyPortfolioDto"}}}},"responses":{"201":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Portfolio was not found"}},"tags":["portfolios"]}},"/identities/{did}/custodied-portfolios":{"get":{"operationId":"PortfoliosController_getCustodiedPortfolios","summary":"Get all custodied Portfolios of an Identity","description":"This endpoint will provide list of all the custodied Portfolios of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose custodied Portfolios are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"Returns the list of all custodied Portfolios of the given Identity","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/PortfolioIdentifierModel"},"description":"Returns the list of all custodied Portfolios of the given Identity"}}}]}}}}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}":{"get":{"operationId":"PortfoliosController_getPortfolio","summary":"Get details of a Portfolio for an Identity","description":"This endpoint will provide details for the provided Portfolio of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Portfolio details are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the portfolio for which details are to be fetched. Use 0 for default Portfolio","example":"1","schema":{"type":"string"}}],"responses":{"200":{"description":"Portfolio details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/PortfolioModel"}}}}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/custodian":{"post":{"operationId":"PortfoliosController_setCustodian","summary":"Set Portfolio Custodian","description":"This endpoint will set Custodian for the provided Portfolio of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity who owns the Portfolio for which Custodian is to be set","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the portfolio for which to set the Custodian. Use 0 for default Portfolio","example":"1","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetCustodianDto"}}}},"responses":{"201":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"<ul><li>The Portfolio with provided ID was not found</li> <li>The Identity with provided DID was not found</li></ul>"},"422":{"description":"Insufficient balance to set Custodian for the Portfolio"}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/transactions":{"get":{"operationId":"PortfoliosController_getTransactionHistory","summary":"Get list of transactions for a Portfolio","description":"This endpoint will provide list of transaction for the provided Portfolio of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Portfolio transactions are to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the portfolio for which transactions are to be fetched. Use 0 for the default Portfolio","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"account","required":false,"in":"query","description":"Account address involved in transactions","example":"5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx","schema":{"type":"string"}},{"name":"ticker","required":false,"in":"query","description":"Asset ticker for which the transactions were made","example":"123","schema":{"type":"string"}}],"responses":{"200":{"description":"Portfolio transactions","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HistoricSettlementModel"}}}},"404":{"description":"<ul><li>The Portfolio with provided ID was not found</li> <li>The Identity with provided DID was not found</li></ul>"}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/quit-custody":{"post":{"operationId":"PortfoliosController_quitCustody","summary":"Quit Custody of a Portfolio","description":"This endpoint will quit signers Custody over the provided Portfolio of an Identity","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity who owns the Portfolio for which Custody is to be quit","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the portfolio for which to quit Custody. Use 0 for the default Portfolio","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"<ul><li>The Portfolio with provided ID was not found</li> <li>The Identity with provided DID was not found</li></ul>"},"422":{"description":"Insufficient balance to quit Custody for the Portfolio"}},"tags":["portfolios"]}},"/identities/{did}/portfolios/{id}/created-at":{"get":{"operationId":"PortfoliosController_createdAt","summary":"Get Portfolio creation event data","description":"The endpoint retrieves the identifier data (block number, date and event index) of the event that was emitted when the given Numbered Portfolio was created. This requires Polymesh GraphQL Middleware Service","parameters":[{"name":"did","required":true,"in":"path","description":"The DID of the Identity whose Portfolio creation event is to be fetched","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}},{"name":"id","required":true,"in":"path","description":"The ID of the portfolio for which Portfolio creation event is to be fetched. Throws an error if default Portfolio (0) details are requested","example":"1","schema":{"type":"string"}}],"responses":{"200":{"description":"Details of event where the Numbered Portfolio was created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/EventIdentifierModel"}}}},"400":{"description":"Event details for default Portfolio are requested"},"404":{"description":"<ul><li>The Portfolio doesn't exist</li> <li>The Portfolio hasn't yet been processed by the Middleware</li></ul>"}},"tags":["portfolios"]}},"/developer-testing/webhook":{"post":{"operationId":"DeveloperTestingController_handleWebhook","summary":"Returns a 200 response and echos x-hook-secret if present in the request","description":"This endpoint is meant to aid testing webhook functionality for developers. It has no use for a regular user of the API (DEV ONLY)","parameters":[{"name":"x-hook-secret","required":true,"in":"header","schema":{"type":"string"}}],"responses":{"201":{"description":""},"default":{"description":"An empty object will be returned. The handshake secret given will be set in the response headers"}},"tags":["developer-testing"]}},"/developer-testing/create-test-admins":{"post":{"operationId":"DeveloperTestingController_createTestAdmins","summary":"Given a set of addresses this generates creates an Identity and transfers some POLYX to the address and makes them a CDD provider","description":"This endpoint initializes a set of addresses to be chain admin accounts. The signer must be a CDD provider and have sufficient POLYX to cover the initial amounts (DEV ONLY)","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTestAdminsDto"}}}},"responses":{"200":{"description":"List of Identities that were made CDD providers and given POLYX","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/IdentityModel"},"description":"List of Identities that were made CDD providers and given POLYX"}}}]}}}},"201":{"description":""}},"tags":["developer-testing"]}},"/developer-testing/create-test-accounts":{"post":{"operationId":"DeveloperTestingController_createTestAccounts","summary":"Creates a set of CDD claims for each address given","description":"This endpoint creates Identities for multiple accounts. The signer must be a CDD provider and have sufficient POLYX to cover the initialPolyx amounts. (DEV ONLY)","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateTestAccountsDto"}}}},"responses":{"200":{"description":"List of Identities were created with a CDD claim by the signer","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/IdentityModel"},"description":"List of Identities were created with a CDD claim by the signer"}}}]}}}},"201":{"description":""}},"tags":["developer-testing"]}},"/claims/add":{"post":{"operationId":"ClaimsController_addClaims","summary":"Add Claims targeting an Identity","description":"This endpoint will add Claims to an Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyClaimsDto"}}}},"responses":{"201":{"description":"Transaction response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"Some of the supplied Identity IDs do not exist"},"422":{"description":"A target Identity cannot have CDD claims with different IDs' this should also be added"}},"tags":["claims"]}},"/claims/edit":{"post":{"operationId":"ClaimsController_editClaims","summary":"Edit Claims targeting an Identity","description":"This endpoint allows changing the expiry of a Claim","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyClaimsDto"}}}},"responses":{"201":{"description":"Transaction response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"Account does not have the required roles or permissions"}},"tags":["claims"]}},"/claims/remove":{"post":{"operationId":"ClaimsController_revokeClaims","summary":"Remove provided Claims from an Identity","description":"This endpoint will remove Claims from an Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyClaimsDto"}}}},"responses":{"201":{"description":"Transaction response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Attempt to revoke Investor Uniqueness claims from investors with positive balance"},"422":{"description":"Account does not have the required roles or permissions"}},"tags":["claims"]}},"/claims/add-investor-uniqueness":{"post":{"operationId":"ClaimsController_addInvestorUniqueness","summary":"Add Investor uniqueness Claims to the signing Identity","description":"This endpoint will add Investor uniqueness Claims to the signing Identity","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/AddInvestorUniquenessDto"}}}},"responses":{"201":{"description":"Transaction response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"422":{"description":"Account does not have the required roles or permissions"}},"tags":["claims"]}},"/assets/{ticker}/offerings":{"get":{"operationId":"OfferingsController_getOfferings","summary":"Fetch Asset Offerings for an Asset","description":"This endpoint will provide the list of all Asset Offerings for an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Offerings are to be fetched","example":"TICKER","schema":{"type":"string"}},{"name":"timing","required":false,"in":"query","description":"Timing status by which to filter Offerings","schema":{"enum":["NotStarted","Started","Expired"],"type":"string"}},{"name":"balance","required":false,"in":"query","description":"Balance status by which to filter Offerings","schema":{"enum":["Available","SoldOut","Residual"],"type":"string"}},{"name":"sale","required":false,"in":"query","description":"Sale status by which to filter Offerings","schema":{"enum":["Frozen","Live","ClosedEarly","Closed"],"type":"string"}}],"responses":{"200":{"description":"List of Offerings for this Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/OfferingDetailsModel"},"description":"List of Offerings for this Asset"}}}]}}}}},"tags":["offerings","assets"]}},"/assets/{ticker}/offerings/{id}/investments":{"get":{"operationId":"OfferingsController_getInvestments","summary":"List Investments made in an Offering","description":"This endpoint will return a list of Investments made in an Offering for a given Asset","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Offering","example":"1","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Investments to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Starting offset for pagination","example":"0","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"A List of Investments","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/InvestmentModel"},"description":"A List of Investments"}}}]}}}}},"tags":["offerings"]}},"/assets/{ticker}/checkpoints":{"get":{"operationId":"CheckpointsController_getCheckpoints","summary":"Fetch Asset Checkpoints","description":"This endpoint will provide the list of Checkpoints created on this Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose attached Checkpoints are to be fetched","example":"TICKER","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Checkpoints to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start key from which Checkpoints are to be fetched","example":"START_KEY","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Checkpoints created on this Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/CheckpointDetailsModel"},"description":"List of Checkpoints created on this Asset"}}}]}}}},"400":{"description":"Schedule start date must be in the future"}},"tags":["assets","checkpoints"]},"post":{"operationId":"CheckpointsController_createCheckpoint","summary":"Create Checkpoint","description":"This endpoint will create a snapshot of Asset holders and their respective balances at that moment","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the Checkpoint is to be created","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of the newly created Checkpoint","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedCheckpointModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/{id}":{"get":{"operationId":"CheckpointsController_getCheckpoint","summary":"Fetch details of an Asset Checkpoint","description":"","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Checkpoint to be fetched","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Checkpoint is to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"The Checkpoint details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckpointDetailsModel"}}}},"404":{"description":"Either the Asset or the Checkpoint was not found"}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/schedules":{"get":{"operationId":"CheckpointsController_getSchedules","summary":"Fetch all active Checkpoint Schedules","description":"This endpoint will provide the list of active Schedules which create Checkpoints for a specific Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose attached Checkpoint Schedules are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of active Schedules which create Checkpoints for a specific Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/CheckpointScheduleModel"},"description":"List of active Schedules which create Checkpoints for a specific Asset"}}}]}}}}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/schedules/{id}":{"get":{"operationId":"CheckpointsController_getSchedule","summary":"Fetch details of an Asset Checkpoint Schedule","description":"","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Checkpoint Schedule to be fetched","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Checkpoint Schedule is to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"The Checkpoint Schedule details","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CheckpointScheduleModel"}}}},"404":{"description":"Either the Asset or the Checkpoint Schedule does not exist"}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/schedules/create":{"post":{"operationId":"CheckpointsController_createSchedule","summary":"Create Schedule","description":"This endpoint will create a Schedule that creates Checkpoints periodically","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the Checkpoint creation is to be scheduled","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateCheckpointScheduleDto"}}}},"responses":{"201":{"description":"Details of the newly created Checkpoint Schedule","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedCheckpointScheduleModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/{id}/balances":{"get":{"operationId":"CheckpointsController_getHolders","summary":"Get the Asset balance of the holders at a given Checkpoint","description":"This endpoint returns the Asset balance of holders at a given Checkpoint","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Checkpoint for which to fetch Asset balances","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which to fetch holder balances","example":"TICKER","schema":{"type":"string"}},{"name":"size","required":false,"in":"query","description":"The number of Asset holders to be fetched","example":"10","schema":{"default":"10","type":"string"}},{"name":"start","required":false,"in":"query","description":"Start key from which Asset holders are to be fetched","example":"START_KEY","schema":{"type":"string"}}],"responses":{"200":{"description":"List of balances of the Asset holders at the Checkpoint","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/PaginatedResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/IdentityBalanceModel"},"description":"List of balances of the Asset holders at the Checkpoint"}}}]}}}},"404":{"description":"Either the Asset or the Checkpoint was not found"}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/{id}/balances/{did}":{"get":{"operationId":"CheckpointsController_getAssetBalance","summary":"Get the Asset balance for an Identity at a Checkpoint","description":"This endpoint returns the Asset balance an Identity has at a particular Checkpoint","parameters":[{"name":"id","required":true,"in":"path","description":"The Checkpoint ID to from which to fetch the balance","example":"2","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the balance is to be fetched","schema":{"type":"string"}},{"name":"did","required":true,"in":"path","description":"The Identity for which to fetch the Asset balance","example":"0x0600000000000000000000000000000000000000000000000000000000000000","schema":{"type":"string"}}],"responses":{"200":{"description":"The balance of the Asset the Identity held at a given Checkpoint","content":{"application/json":{"schema":{"$ref":"#/components/schemas/IdentityBalanceModel"}}}},"404":{"description":"The Asset or Checkpoint was not found"}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/checkpoints/schedules/{id}/delete":{"post":{"operationId":"CheckpointsController_deleteSchedule","summary":"Delete Schedule","description":"This endpoint will delete an existing Schedule for Checkpoint creation","parameters":[{"name":"id","required":true,"in":"path","description":"Schedule ID to be deleted","example":"1","schema":{"type":"string"}},{"name":"signer","required":true,"in":"query","description":"An identifier for the account that should sign the transaction","example":"alice","schema":{"type":"string"}},{"name":"dryRun","required":true,"in":"query","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false,"schema":{"type":"boolean"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the Schedule is to be deleted","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"404":{"description":"Schedule doesn't exist. It may have expired, been removed, or never been created"}},"tags":["assets","checkpoints"]}},"/assets/{ticker}/corporate-actions/default-config":{"get":{"operationId":"CorporateActionsController_getDefaultConfig","summary":"Fetch Corporate Action Default Config","description":"This endpoint will provide the default target Identities, global tax withholding percentage, and per-Identity tax withholding percentages for the Asset's Corporate Actions. Any Corporate Action that is created will use these values unless they are explicitly overridden","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Corporate Action Default Config is to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Corporate Action Default Config for the specified Asset","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CorporateActionDefaultConfigModel"}}}}},"tags":["corporate-actions","assets"]}},"/assets/{ticker}/corporate-actions/default-config/modify":{"post":{"operationId":"CorporateActionsController_updateDefaultConfig","summary":"Update Corporate Action Default Config","description":"This endpoint updates the default target Identities, global tax withholding percentage, and per-Identity tax withholding percentages for the Asset's Corporate Actions. Any Corporate Action that is created will use these values unless they are explicitly overridden","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Corporate Action Default Config is to be updated","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CorporateActionDefaultConfigDto"}}}},"responses":{"200":{"description":"Details about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}}},"tags":["corporate-actions","assets"]}},"/assets/{ticker}/corporate-actions/dividend-distributions":{"get":{"operationId":"CorporateActionsController_getDividendDistributions","summary":"Fetch Dividend Distributions","description":"This endpoint will provide the list of Dividend Distributions associated with an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Dividend Distributions are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Dividend Distributions associated with the specified Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/DividendDistributionDetailsModel"},"description":"List of Dividend Distributions associated with the specified Asset"}}}]}}}}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/dividend-distributions/{id}":{"get":{"operationId":"CorporateActionsController_getDividendDistribution","summary":"Fetch a Dividend Distribution","description":"This endpoint will provide a specific Dividend Distribution associated with an Asset","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Dividend Distribution","example":"123","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Dividend Distribution is to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"The details of the Dividend Distribution","content":{"application/json":{"schema":{"$ref":"#/components/schemas/DividendDistributionModel"}}}}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/dividend-distributions/create":{"post":{"operationId":"CorporateActionsController_createDividendDistribution","summary":"Create a Dividend Distribution","description":"This endpoint will create a Dividend Distribution for a subset of the Asset holders at a certain (existing or future) Checkpoint","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which a Dividend Distribution is to be created","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DividendDistributionDto"}}}},"responses":{"201":{"description":"Details of the newly created Dividend Distribution","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreatedDividendDistributionModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"<ul><li>Payment date must be in the future</li><li>Expiry date must be after payment date</li><li>Declaration date must be in the past</li><li>Payment date must be after the Checkpoint date when passing a Date instead of an existing Checkpoint</li><li>Expiry date must be after the Checkpoint date when passing a Date instead of an existing Checkpoint</li><li>Checkpoint date must be in the future when passing a Date instead of an existing Checkpoint</li></ul>"},"404":{"description":"<ul><li>Checkpoint doesn't exist</li><li>Checkpoint Schedule doesn't exist</li><li>Cannot distribute Dividends using the Asset as currency</li></ul>"},"422":{"description":"<ul><li>The origin Portfolio's free balance is not enough to cover the Distribution amount</li><li>The Distribution has already expired</li></ul>"}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/{id}/delete":{"post":{"operationId":"CorporateActionsController_deleteCorporateAction","summary":"Delete a Corporate Action","description":"This endpoint deletes a Corporate Action of a specific Asset","parameters":[{"name":"id","required":true,"in":"path","description":"Corporate Action number to be deleted","example":"1","schema":{"type":"string"}},{"name":"signer","required":true,"in":"query","description":"An identifier for the account that should sign the transaction","example":"alice","schema":{"type":"string"}},{"name":"dryRun","required":true,"in":"query","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false,"schema":{"type":"boolean"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Corporate Action is to be deleted","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"The Corporate Action doesn't exist"}},"tags":["corporate-actions","assets"]}},"/assets/{ticker}/corporate-actions/dividend-distributions/{id}/payments/pay":{"post":{"operationId":"CorporateActionsController_payDividends","summary":"Pay dividends for a Dividend Distribution","description":"This endpoint transfers unclaimed dividends to a list of target Identities","parameters":[{"name":"id","required":true,"in":"path","description":"The Corporate Action number for the the Dividend Distribution (Dividend Distribution ID)","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which dividends are to be transferred","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PayDividendsDto"}}}},"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"<ul><li>The Distribution's payment date hasn't been reached</li><li>The Distribution has already expired</li><li>Some of the supplied Identities have already either been paid or claimed their share of the Distribution</li><li>Some of the supplied Identities are not included in this Distribution</li></ul>"}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/{id}/documents/link":{"post":{"operationId":"CorporateActionsController_linkDocuments","summary":"Link documents to a Corporate Action","description":"This endpoint links a list of documents to the Corporate Action. Any previous links are removed in favor of the new list. All the documents to be linked should already be linked to the Asset of the Corporate Action.","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the Corporate Action","example":"123","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to which the documents are attached","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LinkDocumentsDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"422":{"description":"Some of the provided documents are not associated with the Asset"}},"tags":["corporate-actions","assets"]}},"/assets/{ticker}/corporate-actions/{id}/payments/claim":{"post":{"operationId":"CorporateActionsController_claimDividends","summary":"Claim dividend payment for a Dividend Distribution","description":"This endpoint allows a target Identity of a Dividend distribution to claim their unclaimed Dividends","parameters":[{"name":"id","required":true,"in":"path","description":"The Corporate Action number for the the Dividend Distribution (Dividend Distribution ID)","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which dividends are to be claimed","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"422":{"description":"<ul><li>The Distribution's payment date hasn't been reached</li><li>The Distribution has already expired</li><li>The current Identity is not included in this Distribution</li><li>The current Identity has already claimed dividends</li></ul>"}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/{id}/reclaim-funds":{"post":{"operationId":"CorporateActionsController_reclaimRemainingFunds","summary":"Reclaim remaining funds of a Dividend Distribution","description":"This endpoint reclaims any remaining funds back to the origin Portfolio from which the initial dividend funds came from. This can only be done after the Distribution has expired","parameters":[{"name":"id","required":true,"in":"path","description":"The Corporate Action number for the expired Dividend Distribution (Dividend Distribution ID)","example":"1","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which dividends are to be reclaimed","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"200":{"description":"Information about the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"422":{"description":"<ul><li>The Distribution must be expired</li><li>Distribution funds have already been reclaimed</li></ul>"}},"tags":["corporate-actions","assets","dividend-distributions"]}},"/assets/{ticker}/corporate-actions/dividend-distributions/{id}/modify-checkpoint":{"post":{"operationId":"CorporateActionsController_modifyDistributionCheckpoint","summary":"Modify the Checkpoint of a Dividend Distribution","description":"This endpoint modifies the Checkpoint of a Dividend Distribution. The Checkpoint can be modified only if the payment period for the Distribution has not yet started","parameters":[{"name":"id","required":true,"in":"path","description":"The Corporate Action number for the the Dividend Distribution (Dividend Distribution ID)","example":"123","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Dividend Distribution Checkpoint is to be modified","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ModifyDistributionCheckpointDto"}}}},"responses":{"200":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"type":"object"}}}},"400":{"description":"The Checkpoint date must be in the future when passing a Date instead of an existing Checkpoint"},"404":{"description":"<ul><li>Checkpoint doesn't exist</li><li>Checkpoint Schedule doesn't exist</li></ul>"},"422":{"description":"<ul><li>Distribution is already in its payment period</li><li>Payment date must be after the Checkpoint date when passing a Date instead of an existing Checkpoint</li><li>Expiry date must be after the Checkpoint date when passing a Date instead of an existing Checkpoint</li></ul>"}},"tags":["corporate-actions","assets","dividend-distributions","checkpoints"]}},"/assets/{ticker}/compliance-requirements":{"get":{"operationId":"ComplianceRequirementsController_getComplianceRequirements","summary":"Fetch Compliance Requirements of an Asset","description":"This endpoint will provide the list of all compliance requirements of an Asset along with Default Trusted Claim Issuers","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose Compliance Requirements are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of Compliance Requirements of the Asset along with Default Trusted Claim Issuers","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComplianceRequirementsModel"}}}},"404":{"description":"The Asset was not found"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/set":{"post":{"operationId":"ComplianceRequirementsController_setRequirements","summary":"Set Compliance requirements for an Asset","description":"This endpoint sets Compliance rules for an Asset. This method will replace the current rules","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose compliance requirements are to be set","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetRequirementsDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset was not found"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/pause":{"post":{"operationId":"ComplianceRequirementsController_pauseRequirements","summary":"Pause compliance requirements for an Asset","description":"This endpoint pauses compliance rules for an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose compliance requirements are to be paused","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset was not found"},"422":{"description":"Insufficient balance to perform transaction"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/unpause":{"post":{"operationId":"ComplianceRequirementsController_unpauseRequirements","summary":"Unpause compliance requirements for an Asset","description":"This endpoint unpauses compliance rules for an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose compliance requirements are to be unpaused","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset was not found"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/{id}/delete":{"post":{"operationId":"ComplianceRequirementsController_deleteRequirement","summary":"Delete single compliance requirement for an Asset","description":"This endpoint deletes referenced compliance requirement for an Asset","parameters":[{"name":"id","required":true,"in":"path","description":"The ID of the compliance requirement to be deleted","example":"123","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset from whose compliance requirement is to be deleted","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"The Asset was not found"},"422":{"description":"Insufficient balance to perform transaction"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/delete":{"post":{"operationId":"ComplianceRequirementsController_deleteRequirements","summary":"Delete all compliance requirements for an Asset","description":"This endpoint deletes all compliance requirements for an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose compliance requirements are to be deleted","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionBaseDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Returned if there are no existing compliance requirements for the Asset"},"404":{"description":"The Asset was not found"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/add":{"post":{"operationId":"ComplianceRequirementsController_addRequirement","summary":"Add a new compliance requirement for an Asset","description":"This endpoint adds a new compliance requirement to the specified Asset. This doesn't modify the existing requirements","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset to which the compliance requirement is to be added","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RequirementDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Returned if the transaction failed"},"404":{"description":"The Asset was not found"},"422":{"description":"Compliance Requirement complexity limit exceeded"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/{id}/modify":{"post":{"operationId":"ComplianceRequirementsController_modifyComplianceRequirement","summary":"Modify single compliance requirement for an Asset","description":"This endpoint modifies referenced compliance requirement for an Asset","parameters":[{"name":"id","required":true,"in":"path","description":"The id of the compliance requirement to be modified","example":"123","schema":{"type":"string"}},{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset for which the compliance requirement is to be modified","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RequirementDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"Returned if there is no change in data"},"404":{"description":"The Asset or compliance requirement was not found"}},"tags":["assets","compliance"]}},"/assets/{ticker}/compliance-requirements/status":{"get":{"operationId":"ComplianceRequirementsController_areRequirementsPaused","summary":"Check if the requirements are paused","description":"This endpoint checks if the compliance requirements are paused for a given ticker","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose compliance requirements status are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"Compliance Requirement status","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ComplianceStatusModel"}}}},"404":{"description":"The Asset does not exist"}},"tags":["assets","compliance"]}},"/assets/{ticker}/trusted-claim-issuers":{"get":{"operationId":"TrustedClaimIssuersController_getTrustedClaimIssuers","summary":"Fetch trusted Claim Issuers of an Asset","description":"This endpoint will provide the list of all default trusted Claim Issuers of an Asset","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose trusted Claim Issuers are to be fetched","example":"TICKER","schema":{"type":"string"}}],"responses":{"200":{"description":"List of trusted Claim Issuers of the Asset","content":{"application/json":{"schema":{"allOf":[{"$ref":"#/components/schemas/ResultsModel"},{"properties":{"results":{"type":"array","items":{"$ref":"#/components/schemas/TrustedClaimIssuerModel"},"description":"List of trusted Claim Issuers of the Asset"}}}]}}}}},"tags":["assets","compliance"]}},"/assets/{ticker}/trusted-claim-issuers/set":{"post":{"operationId":"TrustedClaimIssuersController_setTrustedClaimIssuers","summary":"Set trusted Claim Issuers of an Asset","description":"This endpoint will assign a new default list of trusted Claim Issuers to the Asset by replacing the existing ones","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose trusted Claim Issuers are to be set","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetTrustedClaimIssuersDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"400":{"description":"The supplied claim issuer list is equal to the current one"},"404":{"description":"<ul><li>Asset was not found</li> <li>Some of the supplied Identities do not exist</li></ul>"}},"tags":["assets","compliance"]}},"/assets/{ticker}/trusted-claim-issuers/add":{"post":{"operationId":"TrustedClaimIssuersController_addTrustedClaimIssuers","summary":"Add trusted Claim Issuers of an Asset","description":"This endpoint will add the supplied Identities to the Asset's list of trusted claim issuers","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose trusted Claim Issuers are to be added","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SetTrustedClaimIssuersDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"<ul><li>Asset was not found</li> <li>Some of the supplied Identities do not exist</li></ul>"},"422":{"description":"One or more of the supplied Identities already are Trusted Claim Issuers"}},"tags":["assets","compliance"]}},"/assets/{ticker}/trusted-claim-issuers/remove":{"post":{"operationId":"TrustedClaimIssuersController_removeTrustedClaimIssuers","summary":"Remove trusted Claim Issuers of an Asset","description":"This endpoint will remove the supplied Identities from the Asset's list of trusted claim issuers","parameters":[{"name":"ticker","required":true,"in":"path","description":"The ticker of the Asset whose trusted Claim Issuers are to be removed","example":"TICKER","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RemoveTrustedClaimIssuersDto"}}}},"responses":{"201":{"description":"Details of the transaction","content":{"application/json":{"schema":{"$ref":"#/components/schemas/TransactionQueueModel"}}}},"202":{"description":"Returned if `webhookUrl` is passed in the body. A response will be returned after the transaction has been validated. The result will be posted to the `webhookUrl` given when the transaction is completed","content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotificationPayloadModel"}}}},"404":{"description":"<ul><li>Asset was not found</li> <li>Some of the supplied Identities do not exist</li></ul>"},"422":{"description":"One or more of the supplied Identities are not Trusted Claim Issuers"}},"tags":["assets","compliance"]}},"/auth/api-key/create":{"post":{"operationId":"AuthController_createApiKey","summary":"Create API Key","description":"This endpoint will create an API Key","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateApiKeyDto"}}}},"responses":{"200":{"description":"Details of the API key created","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiKeyModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ApiKeyModel"}}}}},"tags":["auth"]}},"/auth/api-key/delete":{"post":{"operationId":"AuthController_deleteApiKey","summary":"Delete an API Key","description":"This endpoint invalidates the given API key","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DeleteApiKeyDto"}}}},"responses":{"201":{"description":""},"204":{"description":"The API key is no longer valid"}},"tags":["auth"]}},"/users/create":{"post":{"operationId":"UsersController_createUser","summary":"Create a new REST API user","description":"This endpoint creates a new REST API user","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserDto"}}}},"responses":{"200":{"description":"The newly created user","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserModel"}}}},"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserModel"}}}}},"tags":["auth"]}}},"info":{"title":"Polymesh REST API","description":"RESTful access to the Polymesh blockchain","version":"1.0","contact":{}},"tags":[],"servers":[],"components":{"schemas":{"MetadataSpecModel":{"type":"object","properties":{"url":{"type":"string","description":"Off-chain specs or documentation link","example":"https://example.com"},"description":{"type":"string","description":"Description of the Metadata type","example":"Some description"},"typedef":{"type":"string","description":"[SCALE](https://wiki.polkadot.network/docs/build-tools-index#scale-codec) encoded `AssetMetadataTypeDef`","example":"https://example.com"}}},"GlobalMetadataModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Global Asset Metadata","example":"1"},"name":{"type":"string","description":"Name of the Global Asset Metadata","example":"Some metadata"},"specs":{"description":"Specs describing the Asset Metadata","allOf":[{"$ref":"#/components/schemas/MetadataSpecModel"}]}},"required":["id","name","specs"]},"AssetDetailsModel":{"type":"object","properties":{"owner":{"type":"string","description":"The DID of the Asset owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"assetType":{"type":"string","description":"Type of the Asset","enum":["EquityCommon","EquityPreferred","Commodity","FixedIncome","Reit","Fund","RevenueShareAgreement","StructuredProduct","Derivative","StableCoin"],"example":"EquityCommon"},"name":{"type":"string","description":"Name of the Asset","example":"MyAsset"},"totalSupply":{"type":"string","description":"Total supply count of the Asset","example":"1000"},"isDivisible":{"type":"boolean","description":"Indicator to know if Asset is divisible or not","example":"false"},"securityIdentifiers":{"description":"List of Asset's Security Identifiers","example":[{"type":"Isin","value":"US0000000000"}],"type":"array","items":{"type":"array"}},"fundingRound":{"type":"string","description":"Current funding round of the Asset","example":"Series A","nullable":true},"isFrozen":{"type":"boolean","description":"Whether transfers are frozen for the Asset","example":"true"}},"required":["owner","assetType","name","totalSupply","isDivisible","securityIdentifiers","fundingRound","isFrozen"]},"PaginatedResultsModel":{"type":"object","properties":{"results":{"type":"generic array"},"total":{"type":"string","description":"Total number of results possible for paginated output","example":"10"},"next":{"type":"string","description":"Offset start value for the next set of paginated data (null means there is no more data to fetch)","nullable":true}},"required":["results","total","next"]},"ResultsModel":{"type":"object","properties":{"results":{"type":"generic array"}},"required":["results"]},"IdentityBalanceModel":{"type":"object","properties":{"identity":{"type":"string","description":"The DID of the Asset Holder","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"balance":{"type":"string","description":"Balance held by the Identity","example":"12345"}},"required":["identity","balance"]},"AssetDocumentModel":{"type":"object","properties":{"name":{"type":"string","description":"Name of the document","example":"Annual report, 2021"},"uri":{"type":"string","description":"URI (Uniform Resource Identifier) of the document","example":"https://example.com/sec/10k-05-23-2021.htm"},"contentHash":{"type":"string","description":"Hash of the document's content. Used to verify the integrity of the document pointed at by the URI","example":"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"type":{"type":"string","description":"Type of the document","example":"Private Placement Memorandum"},"filedAt":{"type":"string","description":"Date at which the document was filed","example":"1987-10-13T18:30:00.000Z"}},"required":["name","uri"]},"AssetDocumentDto":{"type":"object","properties":{"name":{"type":"string","description":"The name of the document","example":"Annual report, 2021"},"uri":{"type":"string","description":"URI (Uniform Resource Identifier) of the document","example":"https://example.com/sec/10k-05-23-2021.htm"},"contentHash":{"type":"string","maxLength":130,"pattern":"/^0x.+/","description":"Hash of the document's content. Used to verify the integrity of the document pointed at by the URI","example":"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"},"type":{"type":"string","description":"Type of the document","example":"Private Placement Memorandum"},"filedAt":{"type":"string","description":"Date at which the document was filed","example":"2021-05-22T18:30:00.000Z"}},"required":["name","uri"]},"SetAssetDocumentsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"documents":{"description":"New list of documents to replace the existing ones","type":"array","items":{"$ref":"#/components/schemas/AssetDocumentDto"}}},"required":["signer","dryRun","documents"]},"IssueDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"amount":{"type":"string","description":"The amount of the Asset to issue","example":"1000"}},"required":["signer","dryRun","amount"]},"TransactionModel":{"type":"object","properties":{"blockNumber":{"type":"string","description":"Number of the block where the transaction resides (status: `Succeeded`, `Failed`)","example":"123"},"blockHash":{"type":"string","description":"Hash of the block","example":"0x0372a35b1ae2f622142aa8519ce70b0980fb35727fd0348d204dfa280f2f5987"},"transactionHash":{"type":"string","description":"Hash of the transaction","example":"0xe0346b494edcca5a30b12f3ef128e54dfce412dbf5a0202b3e69c926267d1473"},"type":{"type":"string","description":"Indicator to know if the transaction is a batch transaction or not","enum":["single","batch"],"example":"single"},"transactionTag":{"type":"string","description":"Transaction type identifier (for UI purposes). The format is <palletName>.<transactionName>","example":"asset.registerTicker"}},"required":["blockNumber","blockHash","transactionHash","type","transactionTag"]},"BatchTransactionModel":{"type":"object","properties":{"blockNumber":{"type":"string","description":"Number of the block where the transaction resides (status: `Succeeded`, `Failed`)","example":"123"},"blockHash":{"type":"string","description":"Hash of the block","example":"0x0372a35b1ae2f622142aa8519ce70b0980fb35727fd0348d204dfa280f2f5987"},"transactionHash":{"type":"string","description":"Hash of the transaction","example":"0xe0346b494edcca5a30b12f3ef128e54dfce412dbf5a0202b3e69c926267d1473"},"type":{"type":"string","description":"Indicator to know if the transaction is a batch transaction or not","enum":["single","batch"],"example":"single"},"transactionTags":{"description":"List of Transaction type identifier (for UI purposes). The format for each identifier is <palletName>.<transactionName>","example":"asset.registerTicker","type":"array","items":{"type":"string"}}},"required":["blockNumber","blockHash","transactionHash","type","transactionTags"]},"FeesModel":{"type":"object","properties":{"protocol":{"type":"string","description":"The amount of POLYX that will be charged for the transaction as protocol fee","example":"0.5"},"gas":{"type":"string","description":"The amount of POLYX that will be charged for the transaction as GAS fee","example":"0.5"},"total":{"type":"string","description":"The total amount of POLYX that will be charged for the transaction","example":"1"}},"required":["protocol","gas","total"]},"PayingAccountModel":{"type":"object","properties":{"balance":{"type":"string","description":"The balance of the paying account","example":"29996999.366176"},"type":{"type":"string","description":"Paying account type","enum":["Subsidy","Other","Caller"],"example":"Caller"},"address":{"type":"string","description":"The paying account address","example":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"}},"required":["balance","type","address"]},"TransactionDetailsModel":{"type":"object","properties":{"status":{"type":"string","description":"Transaction status","enum":["Idle","Unapproved","Running","Rejected","Succeeded","Failed","Aborted"],"example":"Idle"},"fees":{"description":"Transaction fees","allOf":[{"$ref":"#/components/schemas/FeesModel"}]},"supportsSubsidy":{"type":"boolean","example":true,"description":"Indicates if the transaction can be subsidized"},"payingAccount":{"description":"Paying account details","allOf":[{"$ref":"#/components/schemas/PayingAccountModel"}]}},"required":["status","fees","supportsSubsidy","payingAccount"]},"TransactionQueueModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}}},"required":["transactions","details"]},"NotificationPayloadModel":{"type":"object","properties":{"subscriptionId":{"type":"number","description":"The ID of the subscription. Events related to the transaction will contain this ID in the payload","example":1},"nonce":{"type":"number","description":"The nonce for the subscription","example":0},"type":{"type":"string","description":"The type of event","enum":["transaction.update"]},"payload":{"type":"object","description":"The payload of the transaction subscribed too"}},"required":["subscriptionId","nonce","type","payload"]},"SecurityIdentifierDto":{"type":"object","properties":{"type":{"enum":["Isin","Cusip","Cins","Lei","Figi"],"type":"string","description":"The type of Asset identifier","example":"Isin"},"value":{"type":"string","description":"The identifier","example":"US0846707026"}},"required":["type","value"]},"CreateAssetDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"name":{"type":"string","description":"The name of the Asset","example":"Ticker Corp"},"ticker":{"type":"string","description":"The ticker of the Asset. This must already be reserved by the Signer","example":"TICKER"},"initialSupply":{"type":"string","description":"The initial supply count of the Asset","example":"627880"},"isDivisible":{"type":"boolean","description":"Specifies if the Asset can be divided","example":"false"},"assetType":{"type":"string","description":"The type of Asset","enum":["EquityCommon","EquityPreferred","Commodity","FixedIncome","Reit","Fund","RevenueShareAgreement","StructuredProduct","Derivative","StableCoin"],"example":"EquityCommon"},"requireInvestorUniqueness":{"type":"boolean","description":"Specifies whether Identities must have an Investor Uniqueness Claim in order to be able to hold this Asset. More info [here](https://developers.polymesh.live/introduction/identity#polymesh-unique-identity-system-puis)","example":false},"securityIdentifiers":{"description":"List of Asset's Security Identifiers","type":"array","items":{"$ref":"#/components/schemas/SecurityIdentifierDto"}},"fundingRound":{"type":"string","description":"The current funding round of the Asset","example":"Series A"},"documents":{"description":"Documents related to the Asset","type":"array","items":{"$ref":"#/components/schemas/AssetDocumentDto"}}},"required":["signer","dryRun","name","ticker","isDivisible","assetType","requireInvestorUniqueness"]},"TransferOwnershipDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"target":{"type":"string","description":"DID of the target Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"expiry":{"type":"string","description":"Date at which the authorization request for transfer expires","example":"2021-05-22T18:30:00.000Z"}},"required":["signer","dryRun","target"]},"SignerModel":{"type":"object","properties":{"address":{"type":"string","description":"The address associated to the signer","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"}},"required":["address"]},"AuthorizationRequestModel":{"type":"object","properties":{"id":{"type":"string","description":"Unique ID of the Authorization Request (used to accept/reject/cancel)","example":"123"},"expiry":{"type":"string","description":"Date at which the Authorization Request expires and can no longer be accepted. A null value means that the Request never expires","example":"1987-10-13T18:30:00.000Z","nullable":true},"data":{"type":"Authorization","description":"Data corresponding to the type of Authorization Request<table><thead><th>Type</th><th>Data</th></thead><tbody><tr><td>Add Relayer Paying Key</td><td>Beneficiary, Relayer, Allowance</td></tr><tr><td>Become Agent</td><td>Permission Group</td></tr><tr><td>Attest Primary Key Rotation</td><td>DID</td></tr><tr><td>Rotate Primary Key</td><td>DID</td></tr><tr><td>Transfer Ticker</td><td>Ticker</td></tr><tr><td>Add MultiSig Signer</td><td>Account</td></tr><tr><td>Transfer Token Ownership</td><td>Ticker</td></tr><tr><td>Join Identity</td><td>DID   </td></tr><tr><td>Portfolio Custody</td><td>Portfolio</td></tr></tbody></table>","examples":{"type":"PortfolioCustody","value":{"did":"0x0600000000000000000000000000000000000000000000000000000000000000","id":"1"}}},"issuer":{"type":"string","description":"The DID of the request issuer","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"target":{"description":"Target Identity or Account of the request","allOf":[{"$ref":"#/components/schemas/SignerModel"}]}},"required":["id","expiry","data","issuer","target"]},"CreatedAuthorizationRequestModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"authorizationRequest":{"description":"Details of the newly created Authorization Request","allOf":[{"$ref":"#/components/schemas/AuthorizationRequestModel"}]}},"required":["transactions","details","authorizationRequest"]},"RedeemTokensDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"amount":{"type":"string","description":"The amount of Asset tokens to be redeemed","example":"100"},"from":{"type":"string","description":"Portfolio number from which the Asset tokens must be redeemed. Use 0 for the Default Portfolio","example":"1"}},"required":["signer","dryRun","amount","from"]},"TransactionBaseDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false}},"required":["signer","dryRun"]},"BigNumber":{"type":"object","properties":{}},"PortfolioDto":{"type":"object","properties":{"did":{"type":"string","description":"The DID of the Portfolio owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"id":{"description":"Portfolio number. Use 0 for the Default Portfolio","example":"123","allOf":[{"$ref":"#/components/schemas/BigNumber"}]}},"required":["did","id"]},"ControllerTransferDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"origin":{"description":"Portfolio from which Asset tokens will be transferred","allOf":[{"$ref":"#/components/schemas/PortfolioDto"}]},"amount":{"type":"string","description":"The amount of the Asset tokens to be transferred","example":"1000"}},"required":["signer","dryRun","origin","amount"]},"EventIdentifierModel":{"type":"object","properties":{"blockNumber":{"type":"string","description":"Number of the block where the event resides","example":"1000000"},"blockHash":{"type":"string","description":"Hash of the block where the event resides","example":"0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6"},"blockDate":{"type":"string","description":"Date when the block was finalized","example":"1987-10-13T18:30:00.000Z"},"eventIndex":{"type":"string","description":"Index of the event in the block","example":"1"}},"required":["blockNumber","blockHash","blockDate","eventIndex"]},"AgentOperationModel":{"type":"object","properties":{"did":{"type":"string","description":"DID of the Agent that performed the operations","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"history":{"description":"List of Asset Operation Events that were triggered by the Agent Identity","type":"array","items":{"$ref":"#/components/schemas/EventIdentifierModel"}}},"required":["did","history"]},"MetadataEntryModel":{"type":"object","properties":{"asset":{"type":"string","description":"The ticker of the Asset for which this is the Metadata for","example":"TICKER"},"type":{"type":"string","description":"The type of metadata represented by this instance","enum":["Local","Global"]},"id":{"type":"string","description":"ID corresponding to defined `type` of Metadata","example":"1"}},"required":["asset","type","id"]},"MetadataValueModel":{"type":"object","properties":{"value":{"type":"string","description":"Value of the Asset Metadata","example":"Some metadata"},"expiry":{"type":"string","description":"Date at which the Metadata value expires, null if it never expires","example":"2021-05-22T18:30:00.000Z","nullable":true},"lockStatus":{"type":"string","description":"Lock status of Metadata value","enum":["Unlocked","Locked","LockedUntil"],"example":"LockedUntil"},"lockedUntil":{"type":"string","description":"Date till which the Metadata value will be locked. This only applies when `status` is `LockedUntil`","example":"2021-05-22T18:30:00.000Z"}},"required":["value","expiry","lockStatus"]},"MetadataDetailsModel":{"type":"object","properties":{"asset":{"type":"string","description":"The ticker of the Asset for which this is the Metadata for","example":"TICKER"},"type":{"type":"string","description":"The type of metadata represented by this instance","enum":["Local","Global"]},"id":{"type":"string","description":"ID corresponding to defined `type` of Metadata","example":"1"},"name":{"type":"string","description":"Name of the Global Asset Metadata","example":"Some metadata"},"specs":{"description":"Specs describing the Asset Metadata","allOf":[{"$ref":"#/components/schemas/MetadataSpecModel"}]},"value":{"description":"Asset Metadata value and its details (expiry + lock status). `null` means that value is not yet set","nullable":true,"allOf":[{"$ref":"#/components/schemas/MetadataValueModel"}]}},"required":["asset","type","id","name","specs","value"]},"MetadataSpecDto":{"type":"object","properties":{"url":{"type":"string","description":"Off-chain specs or documentation link","example":"https://example.com"},"description":{"type":"string","description":"Description of the Metadata type","example":"Some description"},"typedef":{"type":"string","description":"[SCALE](https://wiki.polkadot.network/docs/build-tools-index#scale-codec) encoded `AssetMetadataTypeDef`","example":"Some example"}}},"MetadataValueDetailsDto":{"type":"object","properties":{"expiry":{"type":"string","nullable":true,"description":"Date at which the Metadata value expires, null if it never expires","example":"2021-05-22T18:30:00.000Z","default":null},"lockStatus":{"enum":["Unlocked","Locked","LockedUntil"],"type":"string","description":"Lock status of Metadata value","example":"LockedUntil"},"lockedUntil":{"type":"string","description":"Date till which the Metadata value will be locked. This is required when `status` is `LockedUntil`","example":"2021-05-22T18:30:00.000Z"}},"required":["expiry","lockStatus"]},"CreateMetadataDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"name":{"type":"string","description":"Name of the Asset Metadata","example":"Maturity"},"specs":{"description":"Details about the Asset Metadata","allOf":[{"$ref":"#/components/schemas/MetadataSpecDto"}]},"value":{"type":"string","description":"Value for the Asset Metadata","example":"Some value"},"details":{"description":"Details about the Asset Metadata value","allOf":[{"$ref":"#/components/schemas/MetadataValueDetailsDto"}]}},"required":["signer","dryRun","name","specs"]},"CreatedMetadataEntryModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"metadata":{"description":"Details of the newly created Asset Metadata","allOf":[{"$ref":"#/components/schemas/MetadataEntryModel"}]}},"required":["transactions","details","metadata"]},"SetMetadataDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"value":{"type":"string","description":"Value for the Asset Metadata","example":"Some value"},"details":{"description":"Details about the Asset Metadata value which includes expiry and lock status of the `value`","allOf":[{"$ref":"#/components/schemas/MetadataValueDetailsDto"}]}},"required":["signer","dryRun"]},"ReserveTickerDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"ticker":{"type":"string","description":"Ticker to be reserved","example":"TICKER"}},"required":["signer","dryRun","ticker"]},"TickerReservationModel":{"type":"object","properties":{"owner":{"type":"string","description":"The DID of the Reservation owner. A null value means the ticker isn't currently reserved","example":"0x0600000000000000000000000000000000000000000000000000000000000000","nullable":true},"expiryDate":{"type":"string","description":"Date at which the Reservation expires. A null value means it never expires (permanent Reservation or Asset already launched)","example":"2021-05-22T18:30:00.000Z","nullable":true},"status":{"type":"string","description":"Status of the ticker Reservation","enum":["Free","Reserved","AssetCreated"],"example":"Free"}},"required":["owner","expiryDate","status"]},"ExtendedTickerReservationModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"tickerReservation":{"description":"Details of the Ticker Reservation","allOf":[{"$ref":"#/components/schemas/TickerReservationModel"}]}},"required":["transactions","details","tickerReservation"]},"AccountModel":{"type":"object","properties":{"signerType":{"type":"string","description":"Type of the Signer","enum":["Identity","Account"],"example":"Account"},"address":{"type":"string","example":"5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"}},"required":["signerType","address"]},"AssetPermissionsModel":{"type":"object","properties":{"type":{"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","enum":["Include","Exclude"],"example":"Include"},"values":{"description":"List of included/excluded Assets","example":["TICKER123456"],"type":"array","items":{"type":"string"}}},"required":["type","values"]},"PortfolioIdentifierModel":{"type":"object","properties":{"did":{"type":"string","description":"The DID of the Portfolio owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"id":{"type":"string","description":"Portfolio number. 0 represents the Default Portfolio","example":"123"}},"required":["did","id"]},"PortfolioPermissionsModel":{"type":"object","properties":{"type":{"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","enum":["Include","Exclude"],"example":"Include"},"values":{"description":"List of included/excluded Portfolios","type":"array","items":{"$ref":"#/components/schemas/PortfolioIdentifierModel"}}},"required":["type","values"]},"TransactionPermissionsModel":{"type":"object","properties":{"type":{"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","enum":["Include","Exclude"],"example":"Include"},"values":{"type":"array","description":"List of included/excluded transactions. A module name (a string without a period separator) represents all the transactions in said module","example":["asset","checkpoint.createCheckpoint"],"items":{"type":"string","enum":["system","babe","timestamp","indices","authorship","balances","identity","cddServiceProviders","polymeshCommittee","committeeMembership","technicalCommittee","technicalCommitteeMembership","upgradeCommittee","upgradeCommitteeMembership","multiSig","bridge","staking","session","grandpa","imOnline","sudo","asset","capitalDistribution","checkpoint","complianceManager","corporateAction","corporateBallot","pips","portfolio","protocolFee","scheduler","settlement","statistics","sto","treasury","utility","externalAgents","relayer","rewards","testUtils","polymeshContracts","preimage","contracts","system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"]}},"exceptions":{"type":"array","description":"Transactions exempted from inclusion or exclusion. For example, if \"type\" is \"Include\", \"values\" contains \"asset\" and \"exceptions\" includes \"asset.registerTicker\", it means that all transactions in the \"asset\" module are included, EXCEPT for \"registerTicker\"","example":["asset.registerTicker"],"items":{"type":"string","enum":["system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"]}}},"required":["type","values"]},"PermissionsModel":{"type":"object","properties":{"assets":{"description":"Assets over which the Account has permissions. A null value represents full permissions","nullable":true,"allOf":[{"$ref":"#/components/schemas/AssetPermissionsModel"}]},"portfolios":{"description":"Portfolios over which the Account has permissions. A null value represents full permissions","nullable":true,"allOf":[{"$ref":"#/components/schemas/PortfolioPermissionsModel"}]},"transactions":{"description":"Transactions that the Account can execute. A null value represents full permissions","nullable":true,"allOf":[{"$ref":"#/components/schemas/TransactionPermissionsModel"}]},"transactionGroups":{"type":"array","description":"Transaction Groups that the Account can execute. Having permissions over a [TxGroup](https://github.com/polymeshassociation/polymesh-sdk/blob/docs/v14/docs/enums/txgroup.md) means having permissions over every TxTag in said group. Note if `transactions` is null, ignore this value","example":["PortfolioManagement"],"items":{"type":"string","enum":["PortfolioManagement","AssetManagement","AdvancedAssetManagement","Distribution","Issuance","TrustedClaimIssuersManagement","ClaimsManagement","ComplianceRequirementsManagement","CorporateActionsManagement","StoManagement"]}}},"required":["assets","portfolios","transactions","transactionGroups"]},"PermissionedAccountModel":{"type":"object","properties":{"account":{"description":"Account details","allOf":[{"$ref":"#/components/schemas/AccountModel"}]},"permissions":{"description":"Permissions present for this Permissioned Account","allOf":[{"$ref":"#/components/schemas/PermissionsModel"}]}},"required":["account","permissions"]},"IdentityModel":{"type":"object","properties":{"did":{"type":"string","example":"0x0600000000000000000000000000000000000000000000000000000000000000","description":"Unique Identity identifier (DID: Decentralized IDentity)"},"primaryAccount":{"description":"Primary Account of the Identity","allOf":[{"$ref":"#/components/schemas/PermissionedAccountModel"}]},"secondaryAccounts":{"description":"Secondary Accounts of the Identity (Up to the first 200)","type":"array","items":{"$ref":"#/components/schemas/PermissionedAccountModel"}},"secondaryAccountsFrozen":{"type":"boolean","description":"Indicator to know if Secondary Accounts are frozen or not","example":false}},"required":["did","primaryAccount","secondaryAccounts","secondaryAccountsFrozen"]},"PendingAuthorizationsModel":{"type":"object","properties":{"received":{"description":"List of pending Authorization Requests targeting the specified Identity","allOf":[{"$ref":"#/components/schemas/AuthorizationRequestModel"}]},"sent":{"description":"List of pending Authorization Requests issued by the specified Identity","allOf":[{"$ref":"#/components/schemas/AuthorizationRequestModel"}]}},"required":["received","sent"]},"ClaimModel":{"type":"object","properties":{"target":{"type":"string","description":"DID of the target Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"issuer":{"type":"string","description":"DID of the issuer Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"issuedAt":{"type":"string","description":"Date when the Claim was issued","example":"1987-10-13T18:30:00.000Z"},"expiry":{"type":"string","nullable":true,"description":"Expiry date of the Claim","example":"1987-10-13T18:30:00.000Z"},"claim":{"type":"object","description":"Details of the Claim containing type and scope","example":{"type":"Accredited","scope":{"type":"Identity","value":"0x61a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"}}}},"required":["target","issuer","issuedAt","expiry","claim"]},"AssetPermissionsDto":{"type":"object","properties":{"type":{"enum":["Include","Exclude"],"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","example":"Include"},"values":{"description":"List of assets to be included or excluded in the permissions","example":["TICKER123456"],"type":"array","items":{"type":"string"}}},"required":["type","values"]},"PortfolioPermissionsDto":{"type":"object","properties":{"type":{"enum":["Include","Exclude"],"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","example":"Include"},"values":{"description":"List of Portfolios to be included or excluded in the permissions","type":"array","items":{"$ref":"#/components/schemas/PortfolioDto"}}},"required":["type","values"]},"TransactionPermissionsDto":{"type":"object","properties":{"type":{"enum":["Include","Exclude"],"type":"string","description":"Indicates whether the permissions are inclusive or exclusive","example":"Include"},"values":{"type":"array","description":"Transactions to be included/excluded","example":["asset","checkpoint.createCheckpoint"],"items":{"type":"string","enum":["system","babe","timestamp","indices","authorship","balances","identity","cddServiceProviders","polymeshCommittee","committeeMembership","technicalCommittee","technicalCommitteeMembership","upgradeCommittee","upgradeCommitteeMembership","multiSig","bridge","staking","session","grandpa","imOnline","sudo","asset","capitalDistribution","checkpoint","complianceManager","corporateAction","corporateBallot","pips","portfolio","protocolFee","scheduler","settlement","statistics","sto","treasury","utility","externalAgents","relayer","rewards","testUtils","polymeshContracts","preimage","contracts","system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"]}},"exceptions":{"type":"array","description":"Transactions to be exempted from inclusion/exclusion. For example, if you wish to exclude the entire `asset` module except for `asset.createAsset`, you would pass `ModuleName.Asset` as part of the `values` array, and `TxTags.asset.CreateAsset` as part of the `exceptions` array","example":["asset.registerTicker"],"items":{"type":"string","enum":["system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"]}}},"required":["type","values"]},"PermissionsLikeDto":{"type":"object","properties":{"assets":{"nullable":true,"description":"Assets on which to grant permissions. A null value represents full permissions","allOf":[{"$ref":"#/components/schemas/AssetPermissionsDto"}]},"portfolios":{"nullable":true,"description":"Portfolios on which to grant permissions. A null value represents full permissions","allOf":[{"$ref":"#/components/schemas/PortfolioPermissionsDto"}]},"transactions":{"nullable":true,"description":"Transactions that the `secondaryAccount` has permission to execute. A null value represents full permissions. This value should not be passed along with the `transactionGroups`.","allOf":[{"$ref":"#/components/schemas/TransactionPermissionsDto"}]},"transactionGroups":{"type":"array","items":{"type":"string","enum":["PortfolioManagement","AssetManagement","AdvancedAssetManagement","Distribution","Issuance","TrustedClaimIssuersManagement","ClaimsManagement","ComplianceRequirementsManagement","CorporateActionsManagement","StoManagement"]},"description":"Transaction Groups that `secondaryAccount` has permission to execute. This value should not be passed along with the `transactions`.","example":["PortfolioManagement"]}}},"AddSecondaryAccountParamsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"secondaryAccount":{"type":"string","description":"Account address to be invited","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"permissions":{"description":"Permissions to be granted to the `secondaryAccount`","allOf":[{"$ref":"#/components/schemas/PermissionsLikeDto"}]},"expiry":{"type":"string","description":"Expiry date of the `permissions`","example":"2021-05-22T18:30:00.000Z"}},"required":["signer","dryRun","secondaryAccount"]},"CreateMockIdentityDto":{"type":"object","properties":{"address":{"type":"string","description":"Account address to create an Identity for","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"initialPolyx":{"description":"Starting POLYX balance to initialize the Account with","example":100000,"allOf":[{"$ref":"#/components/schemas/BigNumber"}]}},"required":["address","initialPolyx"]},"ClaimModel-Omit-claim":{"type":"object","properties":{"target":{"type":"string","description":"DID of the target Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"issuer":{"type":"string","description":"DID of the issuer Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"issuedAt":{"type":"string","description":"Date when the Claim was issued","example":"1987-10-13T18:30:00.000Z"},"expiry":{"type":"string","nullable":true,"description":"Expiry date of the Claim","example":"1987-10-13T18:30:00.000Z"}},"required":["target","issuer","issuedAt","expiry"]},"CddClaimModel":{"type":"object","properties":{"type":{"type":"string","description":"Claim type","example":"CustomerDueDiligence"},"id":{"type":"string","description":"ID of the Claim","example":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"required":["type","id"]},"ScopeModel":{"type":"object","properties":{"type":{"type":"string","description":"The type of Scope. If `Identity` then `value` should be a DID. If `Ticker` then `value` should be a Ticker","enum":["Identity","Ticker","Custom"],"example":"Identity"},"value":{"type":"string","example":"0x61a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1","description":"The value of the Scope. This is a hex prefixed 64 character string for `Identity`, 12 uppercase letters for Ticker"}},"required":["type","value"]},"ClaimScopeModel":{"type":"object","properties":{"scope":{"description":"The scope that has been assigned to Identity","nullable":true,"allOf":[{"$ref":"#/components/schemas/ScopeModel"}]},"ticker":{"type":"string","description":"The ticker to which the scope is valid for","example":"TICKER"}},"required":["scope"]},"InvestorUniquenessClaimModel":{"type":"object","properties":{"type":{"type":"string","description":"Claim type","example":"InvestorUniqueness"},"scope":{"description":"Scope of the Claim","allOf":[{"$ref":"#/components/schemas/ScopeModel"}]},"cddId":{"type":"string","description":"CDD ID of the Claim","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"scopeId":{"type":"string","description":"Scope ID of the Claim","example":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"required":["type","scope","cddId","scopeId"]},"LegModel":{"type":"object","properties":{"from":{"description":"Portfolio from which the transfer is to be made","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"to":{"description":"Portfolio to which the transfer is to be made","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"amount":{"type":"string","description":"Amount to be transferred","example":"123"},"asset":{"type":"string","description":"Asset to be transferred","example":"TICKER"}},"required":["from","to","amount","asset"]},"InstructionModel":{"type":"object","properties":{"venue":{"type":"string","description":"ID of the Venue through which the settlement is handled","example":"123"},"createdAt":{"type":"string","description":"Date when the Instruction was created","example":"1987-10-13T18:30:00.000Z"},"status":{"type":"string","description":"The current status of the Instruction","enum":["Pending","Executed","Failed"],"example":"Pending"},"tradeDate":{"type":"string","description":"Date at which the trade was agreed upon (optional, for offchain trades)","example":"1987-10-13T18:30:00.000Z"},"valueDate":{"type":"string","description":"Date at which the trade was executed (optional, for offchain trades)","example":"1987-10-13T18:30:00.000Z"},"type":{"type":"string","description":"Type of the Instruction","enum":["SettleOnAffirmation","SettleOnBlock","SettleManual"],"example":"SettleOnBlock"},"endBlock":{"type":"string","description":"Block at which the Instruction is executed. This value will only be present for \"SettleOnBlock\" type Instruction","example":"1000000"},"eventIdentifier":{"description":"Identifies the event where the Instruction execution was attempted. This value will not be present for a \"Pending\" Instruction","allOf":[{"$ref":"#/components/schemas/EventIdentifierModel"}]},"memo":{"type":"string","description":"Identifier string provided while creating the Instruction","example":"Transfer of GROWTH Asset"},"legs":{"description":"List of Legs in the Instruction","type":"array","items":{"$ref":"#/components/schemas/LegModel"}}},"required":["venue","createdAt","status","type","legs"]},"LegDto":{"type":"object","properties":{"amount":{"type":"string","description":"Amount of the Asset to be transferred","example":"1000"},"from":{"description":"Portfolio of the sender","example":{"did":"0x0600000000000000000000000000000000000000000000000000000000000000","id":1},"allOf":[{"$ref":"#/components/schemas/PortfolioDto"}]},"to":{"description":"Portfolio of the receiver","example":{"did":"0x0111111111111111111111111111111111111111111111111111111111111111","id":0},"allOf":[{"$ref":"#/components/schemas/PortfolioDto"}]},"asset":{"type":"string","description":"Asset ticker","example":"TICKER"}},"required":["amount","from","to","asset"]},"CreateInstructionDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"tradeDate":{"format":"date-time","type":"string","description":"Date at which the trade was agreed upon (optional, for offchain trades)","example":"1987-10-13T18:30:00.000Z"},"valueDate":{"format":"date-time","type":"string","description":"Date at which the trade was executed (optional, for offchain trades)","example":"1987-10-13T18:30:00.000Z"},"endBlock":{"type":"string","description":"Block at which the Instruction will be executed. If not passed, the Instruction will be executed when all parties affirm or as soon as one party rejects","example":"123"},"memo":{"type":"string","description":"Identifier string to help differentiate instructions. Maximum 32 bytes","example":"Transfer of GROWTH Asset"},"legs":{"type":"array","items":{"$ref":"#/components/schemas/LegDto"}}},"required":["signer","dryRun","legs"]},"CreatedInstructionModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"instruction":{"type":"string","description":"ID of the newly created settlement Instruction","example":"123"}},"required":["transactions","details","instruction"]},"InstructionAffirmationModel":{"type":"object","properties":{"identity":{"type":"string","description":"The DID of the identity affirming the Instruction","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"status":{"type":"string","description":"The current status of the Instruction","enum":["Unknown","Pending","Affirmed"],"example":"Pending"}},"required":["identity","status"]},"VenueDetailsModel":{"type":"object","properties":{"owner":{"type":"string","description":"The DID of the Venue owner","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"description":{"type":"string","description":"Description of the Venue","example":"VENUE-DESC"},"type":{"type":"string","description":"Type of the Venue","enum":["Other","Distribution","Sto","Exchange"],"example":"Distribution"}},"required":["owner","description","type"]},"CreateVenueDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"description":{"type":"string","description":"Description of the Venue","example":"A place to exchange Assets"},"type":{"enum":["Other","Distribution","Sto","Exchange"],"type":"string","description":"The type of Venue","example":"Exchange"}},"required":["signer","dryRun","description","type"]},"CreatedVenueModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"venue":{"type":"string","description":"ID of the newly created Venue","example":"123"}},"required":["transactions","details","venue"]},"ModifyVenueDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"description":{"type":"string","description":"Details about the Venue","example":"The TSX is an exchange located in Toronto, Ontario"},"type":{"enum":["Other","Distribution","Sto","Exchange"],"type":"string","description":"The type of Venue","example":"Exchange"}},"required":["signer","dryRun"]},"TransferBreakdownModel":{"type":"object","properties":{"general":{"type":"string","description":"List of general transfer errors","enum":["InvalidGranularity","SelfTransfer","InvalidReceiverCdd","InvalidSenderCdd","ScopeClaimMissing","InsufficientBalance","TransfersFrozen","InvalidSenderPortfolio","InvalidReceiverPortfolio","InsufficientPortfolioBalance"],"example":["InvalidSenderPortfolio","InvalidSenderCdd"]},"compliance":{"type":"object","description":"Compliance rules for the Asset, and whether the Asset transfer adheres to them"},"restrictions":{"description":"List of transfer restrictions and whether the transfer satisfies each one","type":"array","items":{"type":"string"}},"result":{"type":"boolean","description":"Indicator to know if the transfer is possible.","example":true}},"required":["general","compliance","restrictions","result"]},"BalanceModel":{"type":"object","properties":{"free":{"type":"string","description":"Free asset amount","example":"123"},"locked":{"type":"string","description":"Locked asset amount","example":"456"},"total":{"type":"string","description":"Sum total of locked and free asset amount","example":"578"}},"required":["free","locked","total"]},"TransferPolyxDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"to":{"type":"string","description":"Account that will receive the POLYX","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"amount":{"type":"string","description":"Amount of POLYX to be transferred. Note that amount to be transferred should not be greater than the origin Account's free balance","example":"123"},"memo":{"type":"string","maxLength":32,"description":"A note to help differentiate transfers","example":"Sample transfer"}},"required":["signer","dryRun","to","amount"]},"ExtrinsicModel":{"type":"object","properties":{"blockHash":{"type":"string","description":"Hash of the block where the transaction resides","example":"0x9d05973b0bacdbf26b705358fbcb7085354b1b7836ee1cc54e824810479dccf6"},"blockNumber":{"type":"string","description":"Number of the block where the transaction resides","example":"1000000"},"extrinsicIdx":{"type":"string","description":"Index of the transaction in the block","example":"1"},"address":{"type":"string","description":"Public key of the signer. Unsigned transactions have no signer, in which case this value is null (example: an enacted governance proposal)","nullable":true,"example":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY"},"nonce":{"type":"string","description":"Nonce of the transaction. Null for unsigned transactions where address is null","nullable":true,"example":"123456"},"transactionTag":{"type":"string","description":"Transaction type identifier (for UI purposes). The format is <palletName>.<transactionName>","enum":["system.fillBlock","system.remark","system.setHeapPages","system.setCode","system.setCodeWithoutChecks","system.setChangesTrieConfig","system.setStorage","system.killStorage","system.killPrefix","system.remarkWithEvent","babe.reportEquivocation","babe.reportEquivocationUnsigned","babe.planConfigChange","timestamp.set","indices.claim","indices.transfer","indices.free","indices.forceTransfer","indices.freeze","authorship.setUncles","balances.transfer","balances.transferWithMemo","balances.depositBlockRewardReserveBalance","balances.setBalance","balances.forceTransfer","balances.burnAccountBalance","identity.cddRegisterDid","identity.invalidateCddClaims","identity.removeSecondaryKeys","identity.acceptPrimaryKey","identity.changeCddRequirementForMkRotation","identity.joinIdentityAsKey","identity.leaveIdentityAsKey","identity.addClaim","identity.revokeClaim","identity.setPermissionToSigner","identity.legacySetPermissionToSigner","identity.freezeSecondaryKeys","identity.unfreezeSecondaryKeys","identity.addAuthorization","identity.removeAuthorization","identity.addSecondaryKeysWithAuthorization","identity.addInvestorUniquenessClaim","identity.gcAddCddClaim","identity.gcRevokeCddClaim","identity.addInvestorUniquenessClaimV2","identity.revokeClaimByIndex","identity.rotatePrimaryKeyToSecondary","identity.removeSecondaryKeysOld","identity.placeholderLegacySetPermissionToSigner","identity.addSecondaryKeysWithAuthorizationOld","identity.setSecondaryKeyPermissions","identity.registerCustomClaimType","identity.cddRegisterDidWithCdd","cddServiceProviders.setActiveMembersLimit","cddServiceProviders.disableMember","cddServiceProviders.addMember","cddServiceProviders.removeMember","cddServiceProviders.swapMember","cddServiceProviders.resetMembers","cddServiceProviders.abdicateMembership","polymeshCommittee.setVoteThreshold","polymeshCommittee.setReleaseCoordinator","polymeshCommittee.setExpiresAfter","polymeshCommittee.voteOrPropose","polymeshCommittee.vote","committeeMembership.setActiveMembersLimit","committeeMembership.disableMember","committeeMembership.addMember","committeeMembership.removeMember","committeeMembership.swapMember","committeeMembership.resetMembers","committeeMembership.abdicateMembership","technicalCommittee.setVoteThreshold","technicalCommittee.setReleaseCoordinator","technicalCommittee.setExpiresAfter","technicalCommittee.voteOrPropose","technicalCommittee.vote","technicalCommitteeMembership.setActiveMembersLimit","technicalCommitteeMembership.disableMember","technicalCommitteeMembership.addMember","technicalCommitteeMembership.removeMember","technicalCommitteeMembership.swapMember","technicalCommitteeMembership.resetMembers","technicalCommitteeMembership.abdicateMembership","upgradeCommittee.setVoteThreshold","upgradeCommittee.setReleaseCoordinator","upgradeCommittee.setExpiresAfter","upgradeCommittee.voteOrPropose","upgradeCommittee.vote","upgradeCommitteeMembership.setActiveMembersLimit","upgradeCommitteeMembership.disableMember","upgradeCommitteeMembership.addMember","upgradeCommitteeMembership.removeMember","upgradeCommitteeMembership.swapMember","upgradeCommitteeMembership.resetMembers","upgradeCommitteeMembership.abdicateMembership","multiSig.createMultisig","multiSig.createOrApproveProposalAsIdentity","multiSig.createOrApproveProposalAsKey","multiSig.createProposalAsIdentity","multiSig.createProposalAsKey","multiSig.approveAsIdentity","multiSig.approveAsKey","multiSig.rejectAsIdentity","multiSig.rejectAsKey","multiSig.acceptMultisigSignerAsIdentity","multiSig.acceptMultisigSignerAsKey","multiSig.addMultisigSigner","multiSig.removeMultisigSigner","multiSig.addMultisigSignersViaCreator","multiSig.removeMultisigSignersViaCreator","multiSig.changeSigsRequired","multiSig.makeMultisigSigner","multiSig.makeMultisigPrimary","multiSig.executeScheduledProposal","multiSig.makeMultisigSecondary","bridge.changeController","bridge.changeAdmin","bridge.changeTimelock","bridge.freeze","bridge.unfreeze","bridge.changeBridgeLimit","bridge.changeBridgeExempted","bridge.forceHandleBridgeTx","bridge.batchProposeBridgeTx","bridge.proposeBridgeTx","bridge.handleBridgeTx","bridge.freezeTxs","bridge.unfreezeTxs","bridge.handleScheduledBridgeTx","bridge.addFreezeAdmin","bridge.removeFreezeAdmin","bridge.removeTxs","staking.bond","staking.bondExtra","staking.unbond","staking.withdrawUnbonded","staking.validate","staking.nominate","staking.chill","staking.setPayee","staking.setController","staking.setValidatorCount","staking.increaseValidatorCount","staking.scaleValidatorCount","staking.addPermissionedValidator","staking.removePermissionedValidator","staking.validateCddExpiryNominators","staking.setCommissionCap","staking.setMinBondThreshold","staking.forceNoEras","staking.forceNewEra","staking.setInvulnerables","staking.forceUnstake","staking.forceNewEraAlways","staking.cancelDeferredSlash","staking.payoutStakers","staking.rebond","staking.setHistoryDepth","staking.reapStash","staking.submitElectionSolution","staking.submitElectionSolutionUnsigned","staking.payoutStakersBySystem","staking.changeSlashingAllowedFor","staking.updatePermissionedValidatorIntendedCount","staking.chillFromGovernance","session.setKeys","session.purgeKeys","grandpa.reportEquivocation","grandpa.reportEquivocationUnsigned","grandpa.noteStalled","imOnline.heartbeat","sudo.sudo","sudo.sudoUncheckedWeight","sudo.setKey","sudo.sudoAs","asset.registerTicker","asset.acceptTickerTransfer","asset.acceptAssetOwnershipTransfer","asset.createAsset","asset.freeze","asset.unfreeze","asset.renameAsset","asset.issue","asset.redeem","asset.makeDivisible","asset.addDocuments","asset.removeDocuments","asset.setFundingRound","asset.updateIdentifiers","asset.claimClassicTicker","asset.reserveClassicTicker","asset.controllerTransfer","asset.registerCustomAssetType","asset.createAssetWithCustomType","asset.setAssetMetadata","asset.setAssetMetadataDetails","asset.registerAndSetLocalAssetMetadata","asset.registerAssetMetadataLocalType","asset.registerAssetMetadataGlobalType","asset.redeemFromPortfolio","asset.updateAssetType","capitalDistribution.distribute","capitalDistribution.claim","capitalDistribution.pushBenefit","capitalDistribution.reclaim","capitalDistribution.removeDistribution","checkpoint.createCheckpoint","checkpoint.setSchedulesMaxComplexity","checkpoint.createSchedule","checkpoint.removeSchedule","complianceManager.addComplianceRequirement","complianceManager.removeComplianceRequirement","complianceManager.replaceAssetCompliance","complianceManager.resetAssetCompliance","complianceManager.pauseAssetCompliance","complianceManager.resumeAssetCompliance","complianceManager.addDefaultTrustedClaimIssuer","complianceManager.removeDefaultTrustedClaimIssuer","complianceManager.changeComplianceRequirement","corporateAction.setMaxDetailsLength","corporateAction.setDefaultTargets","corporateAction.setDefaultWithholdingTax","corporateAction.setDidWithholdingTax","corporateAction.initiateCorporateAction","corporateAction.linkCaDoc","corporateAction.removeCa","corporateAction.changeRecordDate","corporateAction.initiateCorporateActionAndDistribute","corporateBallot.attachBallot","corporateBallot.vote","corporateBallot.changeEnd","corporateBallot.changeMeta","corporateBallot.changeRcv","corporateBallot.removeBallot","pips.setPruneHistoricalPips","pips.setMinProposalDeposit","pips.setDefaultEnactmentPeriod","pips.setPendingPipExpiry","pips.setMaxPipSkipCount","pips.setActivePipLimit","pips.propose","pips.vote","pips.approveCommitteeProposal","pips.rejectProposal","pips.pruneProposal","pips.rescheduleExecution","pips.clearSnapshot","pips.snapshot","pips.enactSnapshotResults","pips.executeScheduledPip","pips.expireScheduledPip","portfolio.createPortfolio","portfolio.deletePortfolio","portfolio.movePortfolioFunds","portfolio.renamePortfolio","portfolio.quitPortfolioCustody","portfolio.acceptPortfolioCustody","protocolFee.changeCoefficient","protocolFee.changeBaseFee","scheduler.schedule","scheduler.cancel","scheduler.scheduleNamed","scheduler.cancelNamed","scheduler.scheduleAfter","scheduler.scheduleNamedAfter","settlement.createVenue","settlement.updateVenueDetails","settlement.updateVenueType","settlement.addInstruction","settlement.addAndAffirmInstruction","settlement.affirmInstruction","settlement.withdrawAffirmation","settlement.rejectInstruction","settlement.affirmWithReceipts","settlement.claimReceipt","settlement.unclaimReceipt","settlement.setVenueFiltering","settlement.allowVenues","settlement.disallowVenues","settlement.changeReceiptValidity","settlement.executeScheduledInstruction","settlement.rescheduleInstruction","settlement.updateVenueSigners","settlement.addInstructionWithMemo","settlement.addAndAffirmInstructionWithMemo","settlement.executeManualInstruction","statistics.addTransferManager","statistics.removeTransferManager","statistics.addExemptedEntities","statistics.removeExemptedEntities","statistics.setAssetTransferCompliance","statistics.setEntitiesExempt","statistics.setActiveAssetStats","statistics.batchUpdateAssetStats","sto.createFundraiser","sto.invest","sto.freezeFundraiser","sto.unfreezeFundraiser","sto.modifyFundraiserWindow","sto.stop","treasury.disbursement","treasury.reimbursement","utility.batch","utility.batchAtomic","utility.batchOptimistic","utility.relayTx","externalAgents.createGroup","externalAgents.setGroupPermissions","externalAgents.removeAgent","externalAgents.abdicate","externalAgents.changeGroup","externalAgents.acceptBecomeAgent","externalAgents.createGroupAndAddAuth","externalAgents.createAndChangeCustomGroup","relayer.setPayingKey","relayer.acceptPayingKey","relayer.removePayingKey","relayer.updatePolyxLimit","relayer.increasePolyxLimit","relayer.decreasePolyxLimit","rewards.claimItnReward","rewards.setItnRewardStatus","testUtils.registerDid","testUtils.mockCddRegisterDid","testUtils.getMyDid","testUtils.getCddOf","polymeshContracts.call","polymeshContracts.instantiateWithCode","polymeshContracts.instantiate","polymeshContracts.uploadCode","polymeshContracts.removeCode","polymeshContracts.instantiateWithCodePerms","polymeshContracts.instantiateWithHashPerms","polymeshContracts.updateCallRuntimeWhitelist","preimage.notePreimage","preimage.unnotePreimage","preimage.requestPreimage","preimage.unrequestPreimage","contracts.call","contracts.instantiateWithCode","contracts.instantiate","contracts.uploadCode","contracts.removeCode"],"example":"asset.registerTicker"},"params":{"description":"List of parameters associated with the transaction","example":[{"name":"ticker","value":"TICKER"}],"type":"array","items":{"type":"array"}},"success":{"type":"boolean","description":"Indicates whether the transaction was successful or not","example":true},"specVersionId":{"type":"string","description":"Spec version of the chain","example":"3002"},"extrinsicHash":{"type":"string","description":"Hash of the transaction","example":"44b8a09e9647b34d81d9eb40f26c5bb35ea216610a03df71978558ec939d5120"}},"required":["blockHash","blockNumber","extrinsicIdx","address","nonce","transactionTag","params","success","specVersionId","extrinsicHash"]},"SubsidyModel":{"type":"object","properties":{"beneficiary":{"description":"Account whose transactions are being paid for","allOf":[{"$ref":"#/components/schemas/AccountModel"}]},"subsidizer":{"description":"Account that is paying for the transactions","allOf":[{"$ref":"#/components/schemas/AccountModel"}]},"allowance":{"type":"string","description":"Amount of POLYX being subsidized","example":"12345"}},"required":["beneficiary","subsidizer","allowance"]},"RevokePermissionsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"secondaryAccounts":{"description":"List of secondary Account addresses whose permissions are to be revoked","example":["5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"],"type":"array","items":{"type":"string"}}},"required":["signer","dryRun","secondaryAccounts"]},"PermissionedAccountDto":{"type":"object","properties":{"secondaryAccount":{"type":"string","description":"Account address","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"permissions":{"description":"Permissions to be granted to the `secondaryAccount`","allOf":[{"$ref":"#/components/schemas/PermissionsLikeDto"}]}},"required":["secondaryAccount","permissions"]},"ModifyPermissionsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"secondaryAccounts":{"description":"List of secondary Accounts containing address and modified permissions","type":"array","items":{"$ref":"#/components/schemas/PermissionedAccountDto"}}},"required":["signer","dryRun","secondaryAccounts"]},"NetworkPropertiesModel":{"type":"object","properties":{"name":{"type":"string","description":"Network name","example":"Development"},"version":{"type":"string","description":"Network version number","example":"1"}},"required":["name","version"]},"NetworkBlockModel":{"type":"object","properties":{"id":{"type":"string","description":"Latest Block Id","example":"1"}},"required":["id"]},"CreateSubsidyDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"beneficiary":{"type":"string","description":"Address of the Account to subsidize","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"allowance":{"type":"string","description":"Amount of POLYX to be subsidized. This can be increased/decreased later on","example":"1000"}},"required":["signer","dryRun","beneficiary","allowance"]},"ModifyAllowanceDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"beneficiary":{"type":"string","description":"Address of the beneficiary of the Subsidy relationship whose allowance is being modified","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"allowance":{"type":"string","description":"Amount of POLYX to set the allowance to or increase/decrease the allowance by","example":"1000"}},"required":["signer","dryRun","beneficiary","allowance"]},"QuitSubsidyDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"beneficiary":{"type":"string","description":"Beneficiary address of the Subsidy relationship to be quit. Note, this should be passed only if quitting as a subsidizer","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"},"subsidizer":{"type":"string","description":"Subsidizer address of the Subsidy relationship to be quit. Note, this should be passed only if quitting as a beneficiary","example":"5GwwYnwCYcJ1Rkop35y7SDHAzbxrCkNUDD4YuCUJRPPXbvyV"}},"required":["signer","dryRun"]},"AssetBalanceModel":{"type":"object","properties":{"free":{"type":"string","description":"Free asset amount","example":"123"},"locked":{"type":"string","description":"Locked asset amount","example":"456"},"total":{"type":"string","description":"Sum total of locked and free asset amount","example":"578"},"asset":{"type":"string","description":"Ticker of the Asset","example":"TICKER"}},"required":["free","locked","total","asset"]},"PortfolioModel":{"type":"object","properties":{"id":{"type":"string","description":"Portfolio number. 0 represents the Default Portfolio","example":"123"},"name":{"type":"string","description":"Name of the Portfolio","example":"ABC"},"assetBalances":{"description":"List of balances for each Asset in the Portfolio","type":"array","items":{"$ref":"#/components/schemas/AssetBalanceModel"}},"custodian":{"type":"string","description":"Identity who custodies the Portfolio","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"owner":{"type":"string","description":"Identity who owns the Portfolio","example":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"required":["id","name","assetBalances","owner"]},"PortfolioMovementDto":{"type":"object","properties":{"ticker":{"type":"string","description":"Ticker of Asset to move","example":"TICKER"},"amount":{"type":"string","description":"Amount of the Asset to move","example":"1234"},"memo":{"type":"string","description":"Memo to help identify the transfer. Maximum 32 bytes","example":"Transfer to growth portfolio"}},"required":["ticker","amount"]},"AssetMovementDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"from":{"example":"2","description":"ID of the Portfolio to move the Asset from. Use 0 for default Portfolio","allOf":[{"$ref":"#/components/schemas/BigNumber"}]},"to":{"example":"1","description":"ID of the Portfolio to move the Asset to. Use 0 for default Portfolio","allOf":[{"$ref":"#/components/schemas/BigNumber"}]},"items":{"description":"List of Assets and amounts to be moved","type":"array","items":{"$ref":"#/components/schemas/PortfolioMovementDto"}}},"required":["signer","dryRun","from","to","items"]},"CreatePortfolioDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"name":{"type":"string","description":"The name of the Portfolio to be created","example":"FOLIO-1"}},"required":["signer","dryRun","name"]},"CreatedPortfolioModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"portfolio":{"description":"Details of the newly created Portfolio","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]}},"required":["transactions","details","portfolio"]},"ModifyPortfolioDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"name":{"type":"string","description":"The new name of the Portfolio","example":"FOLIO-1"}},"required":["signer","dryRun","name"]},"SetCustodianDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"target":{"type":"string","description":"The DID of identity to be set as custodian","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"expiry":{"format":"date-time","type":"string","description":"Expiry date for the custody over Portfolio","example":"2021-05-22T18:30:00.000Z"}},"required":["signer","dryRun","target"]},"AccountDataModel":{"type":"object","properties":{"address":{"type":"string","example":"5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"}},"required":["address"]},"HistoricSettlementLegModel":{"type":"object","properties":{"direction":{"type":"string","description":"The direction of the settlement leg","example":"Incoming","enum":["None","Incoming","Outgoing"]}},"required":["direction"]},"HistoricSettlementModel":{"type":"object","properties":{"blockNumber":{"description":"Block number of the settlement transaction","example":"1","allOf":[{"$ref":"#/components/schemas/BigNumber"}]},"blockHash":{"type":"string","description":"Block hash of the settlement transaction","example":"0x01"},"status":{"type":"string","description":"Transaction status","enum":["None","Executed","Failed","Rejected"],"example":"Executed"},"accounts":{"description":"Array of account addresses involved in the settlement","example":[{"address":"5grwXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"},{"address":"5graXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXxxXx"}],"type":"array","items":{"$ref":"#/components/schemas/AccountDataModel"}},"legs":{"description":"Transaction settlement legs","type":"array","items":{"$ref":"#/components/schemas/HistoricSettlementLegModel"}}},"required":["blockNumber","blockHash","status","accounts","legs"]},"CreateTestAdminsDto":{"type":"object","properties":{"accounts":{"description":"The addresses for which to create Identities and set their POLYX balances","type":"array","items":{"$ref":"#/components/schemas/CreateMockIdentityDto"}}},"required":["accounts"]},"CreateTestAccountsDto":{"type":"object","properties":{"signer":{"type":"string","description":"The `signer` to use. The account must have CDD provider permissions, and sufficient POLYX to seed account. Defaults to the configured sudo account","example":"alice"},"accounts":{"description":"The addresses for which to create Identities","type":"array","items":{"$ref":"#/components/schemas/CreateMockIdentityDto"}}},"required":["accounts"]},"ScopeDto":{"type":"object","properties":{"type":{"enum":["Identity","Ticker","Custom"],"type":"string","description":"The type of Scope. If `Identity` then `value` should be a DID. If `Ticker` then `value` should be a Ticker","example":"Identity"},"value":{"type":"string","description":"The value of the Scope. This is a hex prefixed 64 character string for `Identity`, 12 uppercase letters for Ticker","example":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"required":["type","value"]},"TrustedClaimIssuerDto":{"type":"object","properties":{"trustedFor":{"nullable":true,"type":"array","description":"List of Claim types for which an Identity is trusted for verifying. Defaults to all types","default":null,"items":{"type":"string","enum":["Accredited","Affiliate","BuyLockup","SellLockup","CustomerDueDiligence","KnowYourCustomer","Jurisdiction","Exempted","Blocked","InvestorUniqueness","NoType","NoData","InvestorUniquenessV2"]}},"identity":{"type":"string","description":"The Identity of the Claim Issuer"}}},"ClaimDto":{"type":"object","properties":{"type":{"enum":["Accredited","Affiliate","BuyLockup","SellLockup","CustomerDueDiligence","KnowYourCustomer","Jurisdiction","Exempted","Blocked","InvestorUniqueness","NoType","NoData","InvestorUniquenessV2"],"type":"string","description":"The type of Claim. Note that different types require different fields","example":"Accredited"},"scope":{"description":"The scope of the Claim. Required for most types except for `CustomerDueDiligence`, `InvestorUniquenessV2` and `NoData`","allOf":[{"$ref":"#/components/schemas/ScopeDto"}]},"code":{"enum":["Af","Ax","Al","Dz","As","Ad","Ao","Ai","Aq","Ag","Ar","Am","Aw","Au","At","Az","Bs","Bh","Bd","Bb","By","Be","Bz","Bj","Bm","Bt","Bo","Ba","Bw","Bv","Br","Vg","Io","Bn","Bg","Bf","Bi","Kh","Cm","Ca","Cv","Ky","Cf","Td","Cl","Cn","Hk","Mo","Cx","Cc","Co","Km","Cg","Cd","Ck","Cr","Ci","Hr","Cu","Cy","Cz","Dk","Dj","Dm","Do","Ec","Eg","Sv","Gq","Er","Ee","Et","Fk","Fo","Fj","Fi","Fr","Gf","Pf","Tf","Ga","Gm","Ge","De","Gh","Gi","Gr","Gl","Gd","Gp","Gu","Gt","Gg","Gn","Gw","Gy","Ht","Hm","Va","Hn","Hu","Is","In","Id","Ir","Iq","Ie","Im","Il","It","Jm","Jp","Je","Jo","Kz","Ke","Ki","Kp","Kr","Kw","Kg","La","Lv","Lb","Ls","Lr","Ly","Li","Lt","Lu","Mk","Mg","Mw","My","Mv","Ml","Mt","Mh","Mq","Mr","Mu","Yt","Mx","Fm","Md","Mc","Mn","Me","Ms","Ma","Mz","Mm","Na","Nr","Np","Nl","An","Nc","Nz","Ni","Ne","Ng","Nu","Nf","Mp","No","Om","Pk","Pw","Ps","Pa","Pg","Py","Pe","Ph","Pn","Pl","Pt","Pr","Qa","Re","Ro","Ru","Rw","Bl","Sh","Kn","Lc","Mf","Pm","Vc","Ws","Sm","St","Sa","Sn","Rs","Sc","Sl","Sg","Sk","Si","Sb","So","Za","Gs","Ss","Es","Lk","Sd","Sr","Sj","Sz","Se","Ch","Sy","Tw","Tj","Tz","Th","Tl","Tg","Tk","To","Tt","Tn","Tr","Tm","Tc","Tv","Ug","Ua","Ae","Gb","Us","Um","Uy","Uz","Vu","Ve","Vn","Vi","Wf","Eh","Ye","Zm","Zw","Bq","Cw","Sx"],"type":"string","description":"Country code for `Jurisdiction` type Claims","example":"Ca"},"cddId":{"type":"string","description":"cddId for `CustomerDueDiligence` and `InvestorUniqueness` type Claims","example":"0x60000000000000000000000000000000"},"trustedClaimIssuers":{"description":"Optional Identities to trust for this Claim. Defaults to all","type":"array","items":{"$ref":"#/components/schemas/TrustedClaimIssuerDto"}}},"required":["type"]},"ClaimTargetDto":{"type":"object","properties":{"target":{"type":"string","description":"DID of the target Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"claim":{"description":"The Claim to be added, modified or removed","allOf":[{"$ref":"#/components/schemas/ClaimDto"}]},"expiry":{"format":"date-time","type":"string","description":"The expiry date of the Claim","example":"2021-05-22T18:30:00.000Z"}},"required":["target","claim"]},"ModifyClaimsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"claims":{"description":"An array of Claims. Note that different types of Claims require different fields","type":"array","items":{"$ref":"#/components/schemas/ClaimTargetDto"}}},"required":["signer","dryRun","claims"]},"ProofScopeIdCddIdMatchDto":{"type":"object","properties":{"challengeResponses":{"description":"Challenge responses","example":["0x0600000000000000000000000000000000000000000000000000000000000000","0x0700000000000000000000000000000000000000000000000000000000000000"],"type":"array","items":{"type":"string"}},"subtractExpressionsRes":{"type":"string","description":"The subtracted expressions result","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"blindedScopeDidHash":{"type":"string","description":"The blinded scope DID hash","example":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"required":["challengeResponses","subtractExpressionsRes","blindedScopeDidHash"]},"ScopeClaimProofDto":{"type":"object","properties":{"proofScopeIdWellFormed":{"type":"string","description":"The proof scope Id of the claim","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"proofScopeIdCddIdMatch":{"description":"The proof scope Id of the claim","oneOf":[{"type":"string","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},{"$ref":"#/components/schemas/ProofScopeIdCddIdMatchDto"}]}},"required":["proofScopeIdWellFormed","proofScopeIdCddIdMatch"]},"AddInvestorUniquenessDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"scope":{"description":"The type of Claim. Note that different types require different fields","allOf":[{"$ref":"#/components/schemas/ScopeDto"}]},"cddId":{"type":"string","description":"The CDD ID of the investor","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"proof":{"description":"The proof of the claim","oneOf":[{"type":"string","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},{"$ref":"#/components/schemas/ScopeClaimProofDto"}]},"scopeId":{"type":"string","description":"The scope ID of the claim","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"expiry":{"format":"date-time","type":"string","description":"The expiry date of the claim","example":"2020-01-01"}},"required":["signer","dryRun","scope","cddId","proof","scopeId"]},"TierModel":{"type":"object","properties":{"amount":{"type":"string","description":"Total amount available in the Tier","example":"100"},"price":{"type":"string","description":"Price per unit","example":"1"},"remaining":{"type":"string","description":"Total amount remaining for purchase in the Tier","example":"100"}},"required":["amount","price","remaining"]},"OfferingDetailsModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Offering","example":"123"},"creator":{"type":"string","description":"The DID of the creator Identity","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"name":{"type":"string","description":"Name of the Offering","example":"SERIES A"},"offeringPortfolio":{"description":"Portfolio containing the Asset being offered","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"raisingPortfolio":{"description":"Portfolio receiving the Asset being raised","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"raisingCurrency":{"type":"string","description":"Currency denomination of the investment","example":"CURR"},"tiers":{"description":"The Tiers of the Offerings","type":"array","items":{"$ref":"#/components/schemas/TierModel"}},"venue":{"type":"string","description":"The Venue used for the Offering","example":"1"},"start":{"type":"string","description":"Start time of the Offering","example":"1987-10-13T18:30:00.000Z"},"end":{"type":"string","description":"End time of the Offering. A null value means the Offering doesn't end","nullable":true,"example":"1987-10-13T18:30:00.000Z"},"status":{"type":"object","description":"Status of the Offering","example":{"timing":"Started","balance":"Available","sale":"Live"}},"minInvestment":{"type":"string","description":"Minimum raising amount per transaction","example":"1"},"totalAmount":{"type":"string","description":"Total amount to be raised","example":"10000"},"totalRemaining":{"type":"string","description":"Total amount remaining for purchase","example":"10000"}},"required":["id","creator","name","offeringPortfolio","raisingPortfolio","raisingCurrency","tiers","venue","start","end","status","minInvestment","totalAmount","totalRemaining"]},"InvestmentModel":{"type":"object","properties":{"investor":{"type":"string","description":"The DID of the Investor","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"soldAmount":{"type":"string","description":"The amount sold","example":"100"},"investedAmount":{"type":"string","description":"The amount invested","example":"10"}},"required":["investor","soldAmount","investedAmount"]},"CheckpointDetailsModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Checkpoint","example":"1"},"createdAt":{"type":"string","description":"Date at which the Checkpoint was created","example":"1987-10-13T18:30:00.000Z"},"totalSupply":{"type":"string","description":"Total supply of the Asset at this Checkpoint","example":"10000"}},"required":["id","createdAt","totalSupply"]},"CreatedCheckpointModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"checkpoint":{"type":"object","description":"Identifiers of the newly created Checkpoint","example":{"id":"1","ticker":"TICKER"}}},"required":["transactions","details","checkpoint"]},"CalendarPeriodModel":{"type":"object","properties":{"unit":{"type":"string","description":"Unit of the period","enum":["second","minute","hour","day","week","month","year"],"example":"month"},"amount":{"type":"string","description":"Number of units","example":"3"}},"required":["unit","amount"]},"CheckpointScheduleModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Schedule","example":"123"},"ticker":{"type":"string","description":"Ticker of the Asset whose Checkpoints will be created with this Schedule","example":"TICKER"},"start":{"type":"string","description":"Date at which first Checkpoint was created","example":"1987-10-13T18:30:00.000Z"},"expiryDate":{"type":"string","description":"Date at which the last Checkpoint will be created with this Schedule. A null value means that this Schedule never expires","nullable":true,"example":"1987-10-13T18:30:00.000Z"},"period":{"description":"Period in which this Schedule creates a Checkpoint. A null value means this Schedule creates a single Checkpoint and then expires","nullable":true,"allOf":[{"$ref":"#/components/schemas/CalendarPeriodModel"}]},"complexity":{"type":"string","description":"Abstract measure of the complexity of this Schedule. Shorter periods translate into more complexity","example":"1"},"remainingCheckpoints":{"type":"string","description":"Number of Checkpoints left to be created by the Schedule","example":"10"},"nextCheckpointDate":{"type":"string","description":"Date when the next Checkpoint will be created","example":"1987-10-13T18:30:00.000Z"}},"required":["id","ticker","start","expiryDate","period","complexity","remainingCheckpoints","nextCheckpointDate"]},"CalendarPeriodDto":{"type":"object","properties":{"unit":{"enum":["second","minute","hour","day","week","month","year"],"type":"string","description":"Unit of the period","example":"month"},"amount":{"type":"string","description":"Number of units","example":"3"}},"required":["unit","amount"]},"CreateCheckpointScheduleDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"start":{"type":"string","nullable":true,"description":"Date from which the Schedule will start creating Checkpoints. A null value means the first Checkpoint will be created immediately","example":"2021-05-22T18:30:00.000Z"},"period":{"nullable":true,"description":"Periodic interval between Checkpoints. For example, a period of 2 weeks means that a Checkpoint will be created every 2 weeks. A null value means this Schedule creates a single Checkpoint and then expires","allOf":[{"$ref":"#/components/schemas/CalendarPeriodDto"}]},"repetitions":{"type":"string","nullable":true,"description":"Number of Checkpoints that should be created by this Schedule. A null or 0 value means infinite Checkpoints (the Schedule never expires)","example":"12"}},"required":["signer","dryRun","start","period","repetitions"]},"CreatedCheckpointScheduleModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"schedule":{"description":"Static data (and identifiers) of the newly created Schedule","allOf":[{"$ref":"#/components/schemas/CheckpointScheduleModel"}]}},"required":["transactions","details","schedule"]},"CorporateActionTargetsModel":{"type":"object","properties":{"treatment":{"type":"string","description":"Indicates how the `identities` are to be treated","enum":["Include","Exclude"],"example":"Include"},"identities":{"description":"Determines which Identities will be affected by the Corporate Action. If the value of `treatment` is `Include`, then all Identities in this array will be affected. Otherwise, every Asset holder Identity **EXCEPT** for the ones in this array will be affected","example":["0x0600000000000000000000000000000000000000000000000000000000000000","0x0611111111111111111111111111111111111111111111111111111111111111"],"type":"array","items":{"type":"string"}}},"required":["treatment","identities"]},"TaxWithholdingModel":{"type":"object","properties":{"identity":{"type":"string","description":"DID for which the tax withholding percentage is overridden","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"percentage":{"type":"string","description":"Tax withholding percentage (from 0 to 100)","example":"67.25"}},"required":["identity","percentage"]},"CorporateActionDefaultConfigModel":{"type":"object","properties":{"targets":{"description":"Identities that will be affected by the Corporate Actions","allOf":[{"$ref":"#/components/schemas/CorporateActionTargetsModel"}]},"defaultTaxWithholding":{"type":"string","description":"Tax withholding percentage(0-100) that applies to Identities that don't have a specific percentage assigned to them","example":"25"},"taxWithholdings":{"description":"List of Identities and the specific tax withholding percentage that should apply to them. This takes precedence over `defaultTaxWithholding`","type":"array","items":{"$ref":"#/components/schemas/TaxWithholdingModel"}}},"required":["targets","defaultTaxWithholding","taxWithholdings"]},"CorporateActionTargetsDto":{"type":"object","properties":{"treatment":{"enum":["Include","Exclude"],"type":"string","description":"Indicates how the `identities` are to be treated","example":"Include"},"identities":{"description":"Determines which Identities will be affected by the Corporate Action. If the value of `treatment` is `Include`, then all Identities in this array will be affected. Otherwise, every Asset holder Identity **EXCEPT** for the ones in this array will be affected","example":["0x0600000000000000000000000000000000000000000000000000000000000000","0x0611111111111111111111111111111111111111111111111111111111111111"],"type":"array","items":{"type":"string"}}},"required":["treatment","identities"]},"TaxWithholdingDto":{"type":"object","properties":{"identity":{"type":"string","description":"DID for which the tax withholding percentage is to be overridden","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"percentage":{"type":"string","description":"Tax withholding percentage (from 0 to 100)","example":"67.25"}},"required":["identity","percentage"]},"CorporateActionDefaultConfigDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"targets":{"description":"Identities that will be affected by the Corporate Actions","allOf":[{"$ref":"#/components/schemas/CorporateActionTargetsDto"}]},"defaultTaxWithholding":{"type":"string","description":"Tax withholding percentage (0-100) that applies to Identities that don't have a specific percentage assigned to them","example":"25"},"taxWithholdings":{"description":"List of Identities and the specific tax withholding percentage that should apply to them. This takes precedence over `defaultTaxWithholding`","type":"array","items":{"$ref":"#/components/schemas/TaxWithholdingDto"}}},"required":["signer","dryRun"]},"DividendDistributionDetailsModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Corporate Action","example":"1"},"ticker":{"type":"string","description":"Ticker of the Asset","example":"TICKER"},"declarationDate":{"type":"string","description":"Date at which the Corporate Action was created","example":"1987-10-13T18:30:00.000Z"},"description":{"type":"string","description":"Brief description of the Corporate Action","example":"Corporate Action description"},"targets":{"description":"Identities that will be affected by this Corporate Action","allOf":[{"$ref":"#/components/schemas/CorporateActionTargetsModel"}]},"defaultTaxWithholding":{"type":"string","description":"Tax withholding percentage(0-100) that applies to Identities that don't have a specific percentage assigned to them","example":"25"},"taxWithholdings":{"description":"List of Identities and the specific tax withholding percentage that should apply to them. This takes precedence over `defaultTaxWithholding`","type":"array","items":{"$ref":"#/components/schemas/TaxWithholdingModel"}},"origin":{"description":"Portfolio from which the Dividends are distributed","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"currency":{"type":"string","description":"Ticker of the currency in which Dividends are distributed","example":"TICKER"},"perShare":{"type":"string","description":"Amount of `currency` to pay for each Asset holders' share","example":"100"},"maxAmount":{"type":"string","description":"Maximum amount of `currency` to be distributed","example":"1000"},"expiryDate":{"type":"string","description":"Date after which Dividends can no longer be paid/reclaimed. A null value means the Distribution never expires","example":"1987-10-13T18:30:00.000Z","nullable":true},"paymentDate":{"type":"string","description":"Date starting from which dividends can be paid/reclaimed","example":"1987-10-13T18:30:00.000Z"},"remainingFunds":{"type":"string","description":"Amount of remaining funds","example":"1000"},"fundsReclaimed":{"type":"boolean","description":"Indicates whether the unclaimed funds have been reclaimed by an Agent","example":false}},"required":["id","ticker","declarationDate","description","targets","defaultTaxWithholding","taxWithholdings","origin","currency","perShare","maxAmount","expiryDate","paymentDate","remainingFunds","fundsReclaimed"]},"DividendDistributionModel":{"type":"object","properties":{"id":{"type":"string","description":"ID of the Corporate Action","example":"1"},"ticker":{"type":"string","description":"Ticker of the Asset","example":"TICKER"},"declarationDate":{"type":"string","description":"Date at which the Corporate Action was created","example":"1987-10-13T18:30:00.000Z"},"description":{"type":"string","description":"Brief description of the Corporate Action","example":"Corporate Action description"},"targets":{"description":"Identities that will be affected by this Corporate Action","allOf":[{"$ref":"#/components/schemas/CorporateActionTargetsModel"}]},"defaultTaxWithholding":{"type":"string","description":"Tax withholding percentage(0-100) that applies to Identities that don't have a specific percentage assigned to them","example":"25"},"taxWithholdings":{"description":"List of Identities and the specific tax withholding percentage that should apply to them. This takes precedence over `defaultTaxWithholding`","type":"array","items":{"$ref":"#/components/schemas/TaxWithholdingModel"}},"origin":{"description":"Portfolio from which the Dividends are distributed","allOf":[{"$ref":"#/components/schemas/PortfolioIdentifierModel"}]},"currency":{"type":"string","description":"Ticker of the currency in which Dividends are distributed","example":"TICKER"},"perShare":{"type":"string","description":"Amount of `currency` to pay for each Asset holders' share","example":"100"},"maxAmount":{"type":"string","description":"Maximum amount of `currency` to be distributed","example":"1000"},"expiryDate":{"type":"string","description":"Date after which Dividends can no longer be paid/reclaimed. A null value means the Distribution never expires","example":"1987-10-13T18:30:00.000Z","nullable":true},"paymentDate":{"type":"string","description":"Date starting from which dividends can be paid/reclaimed","example":"1987-10-13T18:30:00.000Z"}},"required":["id","ticker","declarationDate","description","targets","defaultTaxWithholding","taxWithholdings","origin","currency","perShare","maxAmount","expiryDate","paymentDate"]},"CorporateActionCheckpointDto":{"type":"object","properties":{"type":{"enum":["Existing","Schedule"],"type":"string","description":"Whether the Checkpoint already exists or will be created by a Schedule","example":"Existing"},"id":{"type":"string","description":"ID of the Checkpoint/Schedule (depending on `type`)","example":"1"}},"required":["type","id"]},"DividendDistributionDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"description":{"type":"string","description":"Brief description of the Corporate Action","example":"Corporate Action description"},"declarationDate":{"type":"string","description":"Date at which the issuer publicly declared the Distribution. Optional, defaults to the current date","example":"1987-10-13T18:30:00.000Z"},"targets":{"description":"Asset holder Identities that will be affected by the Corporate Actions","allOf":[{"$ref":"#/components/schemas/CorporateActionTargetsDto"}]},"defaultTaxWithholding":{"type":"string","description":"Tax withholding percentage(0-100) of the Benefits to be held for tax purposes","example":"25"},"taxWithholdings":{"description":"List of Identities and the specific tax withholding percentage that should apply to them. This takes precedence over `defaultTaxWithholding`","type":"array","items":{"$ref":"#/components/schemas/TaxWithholdingDto"}},"checkpoint":{"description":"Checkpoint to be used to calculate Dividends. If a Schedule is passed, the next Checkpoint it creates will be used. If a Date is passed, a Checkpoint will be created at that date and used","oneOf":[{"$ref":"#/components/schemas/CorporateActionCheckpointDto"},{"type":"string","example":"1987-10-13T18:30:00.000Z"}]},"originPortfolio":{"type":"string","description":"Portfolio number from which the Dividends will be distributed. Use 0 for default Portfolio","example":"123"},"currency":{"type":"string","description":"Ticker of the currency in which Dividends will be distributed","example":"TICKER"},"perShare":{"type":"string","description":"Amount of `currency` to pay for each Asset holders' share","example":"100"},"maxAmount":{"type":"string","description":"Maximum amount of `currency` to be distributed","example":"1000"},"paymentDate":{"type":"string","description":"Date starting from which Asset holders can claim their dividends","example":"1987-10-13T18:30:00.000Z"},"expiryDate":{"type":"string","description":"Date after which Dividends can no longer be claimed. Optional, defaults to never expiring","example":"1987-10-13T18:30:00.000Z"}},"required":["signer","dryRun","description","checkpoint","currency","perShare","maxAmount","paymentDate"]},"CreatedDividendDistributionModel":{"type":"object","properties":{"transactions":{"description":"List of transactions","oneOf":[{"$ref":"#/components/schemas/TransactionModel"},{"$ref":"#/components/schemas/BatchTransactionModel"}],"items":{"type":"array"}},"details":{"description":"Transaction details","type":"array","items":{"$ref":"#/components/schemas/TransactionDetailsModel"}},"dividendDistribution":{"description":"Static data (and identifiers) of the newly created Dividend Distribution","allOf":[{"$ref":"#/components/schemas/DividendDistributionModel"}]}},"required":["transactions","details","dividendDistribution"]},"PayDividendsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"targets":{"description":"DIDs of the target Identities","example":["0x0600000000000000000000000000000000000000000000000000000000000000","0x0611111111111111111111111111111111111111111111111111111111111111"],"type":"array","items":{"type":"string"}}},"required":["signer","dryRun","targets"]},"LinkDocumentsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"documents":{"description":"List of documents to be linked to the Corporate Action","type":"array","items":{"$ref":"#/components/schemas/AssetDocumentDto"}}},"required":["signer","dryRun","documents"]},"ModifyDistributionCheckpointDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"checkpoint":{"description":"Checkpoint to be updated. If a Schedule is passed, the next Checkpoint it creates will be used. If a Date is passed, a Checkpoint will be created at that date and used","oneOf":[{"$ref":"#/components/schemas/CorporateActionCheckpointDto"},{"type":"string","example":"1987-10-13T18:30:00.000Z"}]}},"required":["signer","dryRun","checkpoint"]},"RequirementModel":{"type":"object","properties":{"id":{"type":"string","description":"Unique ID of the Requirement","example":"1"},"conditions":{"description":"List of Conditions","example":[{"type":"IsPresent","claim":{"type":"Accredited","scope":{"type":"Identity","value":"0x0600000000000000000000000000000000000000000000000000000000000000"}},"target":"Receiver","trustedClaimIssuers":[]}],"type":"array","items":{"type":"array"}}},"required":["id","conditions"]},"TrustedClaimIssuerModel":{"type":"object","properties":{"did":{"type":"string","description":"DID of the Claim Issuer","example":"0x0600000000000000000000000000000000000000000000000000000000000000"},"trustedFor":{"type":"array","description":"List of Claim types for which this Claim Issuer is trusted. A null value means that the issuer is trusted for all Claim types","example":["Accredited","InvestorUniqueness"],"nullable":true,"items":{"type":"string","enum":["Accredited","Affiliate","BuyLockup","SellLockup","CustomerDueDiligence","KnowYourCustomer","Jurisdiction","Exempted","Blocked","InvestorUniqueness","NoType","NoData","InvestorUniquenessV2"]}}},"required":["did"]},"ComplianceRequirementsModel":{"type":"object","properties":{"requirements":{"description":"List of an Asset's compliance requirements","type":"array","items":{"$ref":"#/components/schemas/RequirementModel"}},"defaultTrustedClaimIssuers":{"description":"List of default Trusted Claim Issuers. This is used for conditions where no trusted Claim issuers were specified (i.e. where `trustedClaimIssuers` is undefined)","type":"array","items":{"$ref":"#/components/schemas/TrustedClaimIssuerModel"}}},"required":["requirements","defaultTrustedClaimIssuers"]},"ConditionDto":{"type":"object","properties":{"target":{"enum":["Sender","Receiver","Both"],"type":"string","description":"Whether the Condition applies to the sender, the receiver, or both","example":"Both"},"type":{"enum":["IsPresent","IsAbsent","IsAnyOf","IsNoneOf","IsExternalAgent","IsIdentity"],"type":"string","description":"The type of Condition. \"IsPresent\" requires the target(s) to have a specific Claim. \"IsAbsent\" is the opposite. \"IsAnyOf\" requires the target(s) to have at least one of a list of Claims. \"IsNoneOf\" is the opposite. \"IsIdentity\" requires the target(s) to be a specific Identity","example":"IsNoneOf"},"trustedClaimIssuers":{"description":"Optional Trusted Claim Issuer for this Condition. Defaults to all","type":"array","items":{"$ref":"#/components/schemas/TrustedClaimIssuerDto"}},"claim":{"description":"The Claim for \"IsPresent\" or \"IsAbsent\" Conditions","allOf":[{"$ref":"#/components/schemas/ClaimDto"}]},"claims":{"description":"Claims for \"IsAnyOf\" or \"IsNoneOf\" Conditions","type":"array","items":{"$ref":"#/components/schemas/ClaimDto"}},"identity":{"type":"string","description":"The DID of the Identity for \"IsIdentity\" Conditions"}},"required":["target","type"]},"SetRequirementsDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"requirements":{"description":"Asset transfers must comply with all of the rules in one of the top level elements. Essentially each outer array element has an *or* between them, while the inner elements have an *and* between them","example":[[{"target":"Both","type":"IsNoneOf","claims":[{"type":"Blocked","scope":{"type":"Identity","value":"0x0600000000000000000000000000000000000000000000000000000000000000"}},{"type":"Jurisdiction","scope":{"type":"Ticker","value":"TICKER"},"code":"Us"}],"trustedClaimIssuers":[{"identity":"0x0600000000000000000000000000000000000000000000000000000000000000","trustedFor":["Blocked"]}]}],[{"target":"Sender","type":"IsPresent","claim":{"type":"Accredited","scope":{"type":"Ticker","value":"TICKER"}}}],[{"target":"Receiver","type":"IsIdentity","identity":"0x0600000000000000000000000000000000000000000000000000000000000000"}]],"type":"array","items":{"$ref":"#/components/schemas/ConditionDto"}}},"required":["signer","dryRun","requirements"]},"RequirementDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"conditions":{"description":"Asset transfers must comply with all of the rules in one of the top level elements. Essentially each outer array element has an *or* between them, while the inner elements have an *and* between them","example":[{"target":"Both","type":"IsNoneOf","claims":[{"type":"Blocked","scope":{"type":"Identity","value":"0x0600000000000000000000000000000000000000000000000000000000000000"}},{"type":"Jurisdiction","scope":{"type":"Ticker","value":"TICKER"},"code":"Us"}],"trustedClaimIssuers":[{"identity":"0x0600000000000000000000000000000000000000000000000000000000000000","trustedFor":["Blocked"]}]}],"allOf":[{"$ref":"#/components/schemas/ConditionDto"}]}},"required":["signer","dryRun","conditions"]},"ComplianceStatusModel":{"type":"object","properties":{"arePaused":{"type":"boolean","description":"Indicator to know if compliance requirements are paused or not","example":true}},"required":["arePaused"]},"SetTrustedClaimIssuersDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"claimIssuers":{"description":"The list of Claim Issuers that will be trusted to issue Claims of the specified type","example":[{"identity":"0x0600000000000000000000000000000000000000000000000000000000000000","trustedFor":["Accredited","KnowYourCustomer"]}],"type":"array","items":{"$ref":"#/components/schemas/TrustedClaimIssuerDto"}}},"required":["signer","dryRun","claimIssuers"]},"RemoveTrustedClaimIssuersDto":{"type":"object","properties":{"signer":{"type":"string","description":"An identifier for the account that should sign the transaction","example":"alice"},"dryRun":{"type":"boolean","description":"An optional property that when set to `true` will will verify the validity of the transaction without submitting it to the chain","example":false},"claimIssuers":{"type":"array","items":{"required":true,"description":"The list of Claim issuer identities that should be removed","example":["0x0600000000000000000000000000000000000000000000000000000000000000"],"type":"array","items":{"type":"string"}}}},"required":["signer","dryRun","claimIssuers"]},"CreateApiKeyDto":{"type":"object","properties":{"userName":{"type":"string","description":"The name of the user to create the API key for","example":"Alice"}},"required":["userName"]},"ApiKeyModel":{"type":"object","properties":{"userId":{"type":"string","description":"The user id associated to this key","example":"1"},"secret":{"type":"string","description":"A secret to use for the value of x-api-key on requests","example":"XsQMQRpJqI/ViSdRXEa129mjOT9eJGn3pWGQL1S7Ibw="}},"required":["userId","secret"]},"DeleteApiKeyDto":{"type":"object","properties":{"apiKey":{"type":"string","description":"The API key to delete","example":"XsQMQRpJqI/ViSdRXEa129mjOT9eJGn3pWGQL1S7Ibw="}},"required":["apiKey"]},"CreateUserDto":{"type":"object","properties":{"name":{"type":"string","minLength":3,"maxLength":127,"description":"The unique name of the user","example":"Alice"}},"required":["name"]},"UserModel":{"type":"object","properties":{"name":{"type":"string","description":"Name of the user","example":"Alice"},"id":{"type":"string","description":"The internal ID of the user. The exact format depends on the Datastore being used","example":"ce97d1ec-2d77-463c-bbde-e077e055858c"}},"required":["name","id"]}}}}